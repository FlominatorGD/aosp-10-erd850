#ifndef __NPUC_API_H__
#define __NPUC_API_H__

#include "nnmodel/NNNetwork.h"
#include "capability/NPUCtype.h"
#include "capability/SupportedOpsFactory.h"
#include "CompilerOptions.h"
#include "OperationOptions.h"

// NPUCController has build options (ONDEVICE_COMPILER, INMEMORY_NCP_GEN).
// To build successfully, we must define these values in advance for ondevice compiler.
#define ONDEVICE_COMPILER 1
#include "NPUCController.hpp"

namespace NPUC
{

/**
 * @brief API interface calss for NPU compiler
 */
class NPUCompiler
{
public:
  NPUCompiler(NPUCCompilerOptions *options) : _options(options)
  {
    _supportedOPFactory = new SupportedOperationFactory(options->getSOCType());
    _op = _supportedOPFactory->getSupportedOpInstance();
  }

  ~NPUCompiler()
  {
    _supportedOPFactory->deleteSupportedOpInstance(_op);
    delete _supportedOPFactory;
  }

/**
 * @brief A function to do a compilation for NPU
 * @param[in] net an NNNNetwork that is generted by a converter (convert AndroidNN to NNNetwork)
 * @param[out] ncpBuffer a buffer for ncp binary that is generated by this NPUcompiler
 *             NCPBuffer::addr is unsinged char* for ncp binary.
 * @retval int indicate succeed or fail
 */
#ifdef OFFLINE_COMPILER
  int compile(std::shared_ptr<NPUC::NNNetwork> nnNet, std::shared_ptr<NPUC::NCPBuffer> ncpBuf);
#else
  int compile(NPUC::NNNetwork *nnNet, NPUC::NCPBuffer *ncpBuf);
#endif

  /**
   * @brief A function to check if a operation is supported by NPU Compiler
   * @param[in] opType operation type (enum)
   * @param[in] options SupportedOperationOPtions (kernel size, stride size, padding size, etc.)
   * @retval bool true if supported, otherwise false.
   */
  bool isSupportedOperation(NPUC::OpType opType, SupportedOperationOptions &options);

  /**
   * @brief A function to return NPUCCompilerOptions
   * @retval NPUCCompilerOptions pointer
   */
  NPUCCompilerOptions *getCompilerOptions() { return _options; }

private:
  SupportedOperationFactory *_supportedOPFactory;
  NPUCCompilerOptions *_options;
  SupportedOperation *_op;
};

} // namespace NPUC

#endif //__NPUC_API_H__
