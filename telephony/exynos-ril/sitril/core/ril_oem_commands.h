/*
 * Copyright Samsung Electronics Co., LTD.
 *
 * This software is proprietary of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 */

/*
 * ril_oem_commands.h
 *
 *  Created on: 2014. 7. 24.
 *      Author: jhdaniel.kim
 */
#ifndef __RIL_OEM_COMMANDS_H__
#define __RIL_OEM_COMMANDS_H__

#include <map>
typedef std::map<UINT, std::pair<UINT, UINT>> RouteMap;

    // { OEM_REQUEST_ID, std::make_pair(SERVICE_ID, MSG_ID) }

    // #### OEM RIL Requests ####
    // For Supplementary Service Messages

RouteMap s_RilOemRequestServiceMap = {
    // For Audio Service Messages
    { RIL_REQUEST_OEM_VOLUME_SET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_SET_VOLUME ) },
    { RIL_REQUEST_OEM_VOLUME_GET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_GET_VOLUME ) },
    { RIL_REQUEST_OEM_AUDIO_PATH_SET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_SET_AUDIOPATH) },
    { RIL_REQUEST_OEM_AUDIO_PATH_GET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_GET_AUDIOPATH) },
    { RIL_REQUEST_OEM_MICROPHONE_SET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_SET_MULTIMIC) },
    { RIL_REQUEST_OEM_MICROPHONE_GET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_GET_MULTIMIC) },
    { RIL_REQUEST_OEM_AUDIO_CLOCK_SET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_SET_AUDIO_CLOCK) },
    { RIL_REQUEST_OEM_AUDIO_LOOPBACK_SET, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_SET_AUDIO_LOOPBACK) },
    { RIL_REQUEST_OEM_SET_TTY_MODE, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_SET_TTY_MODE) },

    // For Misc Service OEM Messages
    { RIL_REQUEST_OEM_MODEM_DUMP, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_HIDDEN_REQ) },
    { RIL_REQUEST_OEM_SET_ENG_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_ENG_MODE) },
    { RIL_REQUEST_OEM_SET_SCR_LINE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_SCREEN_LINE) },
    { RIL_REQUEST_OEM_SET_DEBUG_TRACE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_DEBUG_TRACE) },
    { RIL_REQUEST_OEM_SEND_SGC, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SEND_SGC) },
    { RIL_REQUEST_OEM_SET_CARRIER_CONFIG, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_CARRIER_CONFIG) },
    { RIL_REQUEST_OEM_SET_ENG_STRING_INPUT, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_ENG_STRING_INPUT) },
    { RIL_REQUEST_OEM_APN_SETTINGS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_APN_SETTINGS) },
    { RIL_REQUEST_OEM_GET_MSL_CODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_MSL_CODE) },
    { RIL_REQUEST_OEM_SET_PIN_CONTROL, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_PIN_CONTROL) },
    { RIL_REQUEST_OEM_GET_MANUAL_BAND_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_MANUAL_BAND_MODE) },
    { RIL_REQUEST_OEM_SET_MANUAL_BAND_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_MANUAL_BAND_MODE) },
    { RIL_REQUEST_OEM_GET_RF_DESENSE_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_RF_DESENSE_MODE) },
    { RIL_REQUEST_OEM_SET_RF_DESENSE_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_RF_DESENSE_MODE) },
    { RIL_REQUEST_OEM_STORE_ADB_SERIAL_NUMBER, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_STORE_ADB_SERIAL_NUMBER) },
    { RIL_REQUEST_OEM_READ_ADB_SERIAL_NUMBER, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_READ_ADB_SERIAL_NUMBER) },
    { RIL_REQUEST_OEM_SET_PREFERRED_CALL_CAPABILITY, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_PREFERRED_CALL_CAPABILITY) },
    { RIL_REQUEST_OEM_GET_PREFERRED_CALL_CAPABILITY, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_PREFERRED_CALL_CAPABILITY) },

    // Current Radio state
    { RIL_REQUEST_OEM_GET_RADIO_STATE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_RADIO_STATE ) },

    // PS attach/detach
    { RIL_REQUEST_OEM_SET_PS_ATTACH_DETACH, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_SET_PS_SERVICE) },
    { RIL_REQUEST_OEM_GET_PS_ATTACH_DETACH, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_PS_SERVICE) },

    // For IMS Service Messages
    { RIL_REQUEST_OEM_IMS_SET_CONFIGURATION, std::make_pair(RIL_SERVICE_IMS, MSG_IMS_SET_CONF ) },
    { RIL_REQUEST_OEM_IMS_GET_CONFIGURATION, std::make_pair(RIL_SERVICE_IMS, MSG_IMS_GET_CONF ) },
    { RIL_REQUEST_OEM_IMS_SIM_AUTH, std::make_pair(RIL_SERVICE_IMS, MSG_IMS_SIM_AUTH ) },
    { RIL_REQUEST_OEM_IMS_SET_EMERGENCY_CALL_STATUS, std::make_pair(RIL_SERVICE_IMS, MSG_IMS_SET_ERERGENCY_CALL_STATUS ) },
    { RIL_REQUEST_OEM_IMS_SET_SRVCC_CALL_LIST, std::make_pair(RIL_SERVICE_IMS, MSG_IMS_SET_SRVCC_CALL_LIST ) },
    { RIL_REQUEST_OEM_IMS_GET_GBA_AUTH, std::make_pair(RIL_SERVICE_IMS, MSG_IMS_GET_GBA_AUTH ) },
    { RIL_REQUEST_OEM_IMS_SIM_IO, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OEM_IMS_SIM_IO ) },
    // For Network Service OEM Messages
    { RIL_REQUEST_OEM_GET_IMS_SUPPORT_SERVICE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_IMS_SUPPORT_SERVICE) },
    { RIL_REQUEST_OEM_GET_MANUAL_RAT_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_MANUAL_RAT_MODE) },
    { RIL_REQUEST_OEM_SET_MANUAL_RAT_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_SET_MANUAL_RAT_MODE) },
    { RIL_REQUEST_OEM_GET_FREQUENCY_LOCK, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_FREQUENCY_LOCK) },
    { RIL_REQUEST_OEM_SET_FREQUENCY_LOCK, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_SET_FREQUENCY_LOCK) },
    { RIL_REQUEST_OEM_SET_ENDC_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_SET_ENDC_MODE) },
    { RIL_REQUEST_OEM_GET_ENDC_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_ENDC_MODE) },

    /* For GPS Service Messages */
    { RIL_REQUEST_OEM_GPS_SET_FREQUENCY_AIDING, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_SET_FREQUENCY_AIDING ) },
    { RIL_REQUEST_OEM_GPS_GET_LPP_SUPL_REQ_ECID_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GET_LPP_SUPL_REQ_ECID_INFO ) },
    { RIL_REQUEST_OEM_GPS_SET_RRLP_SUPL_REQ_ECID_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GET_RRLP_SUPL_REQ_ECID_INFO ) },
    { RIL_REQUEST_OEM_GPS_MO_LOCATION_REQUEST, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_MO_LOCATION_REQUEST ) },
    { RIL_REQUEST_OEM_GPS_GET_LPP_REQ_SERVING_CELL_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GET_LPP_REQ_SERVING_CELL_INFO ) },
    { RIL_REQUEST_OEM_GPS_SET_SUPL_NI_READY, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_SET_SUPL_NI_READY ) },
    { RIL_REQUEST_OEM_GPS_GET_GSM_EXT_INFO_MSG, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GET_GSM_EXT_INFO_MSG ) },
    { RIL_REQUEST_OEM_GPS_CONTROL_PLANE_ENABLE, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_CONTROL_PLANE_ENABLE ) },
    { RIL_REQUEST_OEM_GPS_GNSS_LPP_PROFILE_SET, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GNSS_LPP_PROFILE_SET ) },
    // Indication from AP, No resp
    { RIL_REQUEST_OEM_GPS_MEASURE_POS_RSP, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_MEASURE_POS_RSP ) },
    { RIL_REQUEST_OEM_GPS_RELEASE_GPS, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_RELEASE_GPS ) },
    { RIL_REQUEST_OEM_GPS_MT_LOCATION_REQUEST, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_MT_LOCATION_REQUEST ) },
    { RIL_REQUEST_OEM_GPS_LPP_PROVIDE_CAPABILITIES, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_LPP_PROVIDE_CAPABILITIES_IND ) },
    { RIL_REQUEST_OEM_GPS_LPP_REQUEST_ASSIST_DATA, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_LPP_REQUEST_ASSIST_DATA ) },
    { RIL_REQUEST_OEM_GPS_LPP_PROVIDE_LOCATION_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_LPP_PROVIDE_LOCATION_INFO_IND ) },
    { RIL_REQUEST_OEM_GPS_LPP_GPS_ERROR_IND, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_LPP_GPS_ERROR_IND ) },
    { RIL_REQUEST_OEM_GPS_SUPL_LPP_DATA_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_SUPL_LPP_DATA_INFO ) },
    { RIL_REQUEST_OEM_GPS_SUPL_NI_MESSAGE, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_SUPL_NI_MESSAGE ) },
    { RIL_REQUEST_OEM_GPS_RETRIEVE_LOC_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_RETRIEVE_LOC_INFO ) },
    // Indication from CP
    { RIL_UNSOL_OEM_GPS_MEASURE_POS_REQ, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_MEASURE_POS_REQ ) },
    { RIL_UNSOL_OEM_GPS_ASSIST_DATA, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_ASSIST_DATA ) },
    { RIL_UNSOL_OEM_GPS_RELEASE_GPS, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_RELEASE_GPS ) },
    { RIL_UNSOL_OEM_GPS_MT_LOCATION_REQUEST, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_MT_LOCATION_REQUEST ) },
    { RIL_UNSOL_OEM_GPS_RESET_GPS_ASSIST_DATA, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_RESET_GPS_ASSIST_DATA ) },
    { RIL_UNSOL_OEM_GPS_LPP_REQUEST_CAPABILITIES, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_LPP_REQUEST_CAPABILITIES ) },
    { RIL_UNSOL_OEM_GPS_LPP_PROVIDE_ASSIST_DATA, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_LPP_PROVIDE_ASSIST_DATA ) },
    { RIL_UNSOL_OEM_GPS_LPP_REQUEST_LOCATION_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_LPP_REQUEST_LOCATION_INFO ) },
    { RIL_UNSOL_OEM_GPS_LPP_GPS_ERROR_IND, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_LPP_GPS_ERROR_IND ) },
    { RIL_UNSOL_OEM_GPS_SUPL_LPP_DATA_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_SUPL_LPP_DATA_INFO ) },
    { RIL_UNSOL_OEM_GPS_SUPL_NI_MESSAGE, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_SUPL_NI_MESSAGE ) },
    { RIL_UNSOL_OEM_GPS_SUPL_NI_READY, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_SET_SUPL_NI_READY ) },
    { RIL_UNSOL_OEM_GPS_START_MDT_LOC, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_START_MDT_LOC ) },
    { RIL_UNSOL_OEM_GPS_LPP_UPDATE_UE_LOC_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_LPP_UPDATE_UE_LOC_INFO ) },
    /* For GPS Service Messages(CDMA & HEDGE GANSS) */
    { RIL_REQUEST_OEM_GPS_SET_GANSS_MEAS_POS_RSP, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_SET_GANSS_MEAS_POS_RSP ) },
    { RIL_REQUEST_OEM_GPS_SET_GPS_LOCK_MODE, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_SET_GPS_LOCK_MODE ) },
    { RIL_REQUEST_OEM_GPS_GET_REFERENCE_LOCATION, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GET_REFERENCE_LOCATION ) },
    { RIL_REQUEST_OEM_GPS_SET_PSEUDO_RANGE_MEASUREMENTS, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_SET_PSEUDO_RANGE_MEASUREMENTS ) },
    { RIL_REQUEST_OEM_GPS_GET_CDMA_PRECISE_TIME_AIDING_INFO, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_GET_CDMA_PRECISE_TIME_AIDING_INFO ) },
    { RIL_REQUEST_OEM_GPS_CDMA_FREQ_AIDING, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_CDMA_FREQ_AIDING ) },
    // Indication from AP, No resp
    { RIL_REQUEST_OEM_GPS_GANSS_AP_POS_CAP_RSP, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_GANSS_AP_POS_CAP_RSP ) },
    // Indication from CP
    { RIL_UNSOL_OEM_GPS_3GPP_SEND_GANSS_ASSIT_DATA, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_3GPP_SEND_GANSS_ASSIT_DATA ) },
    { RIL_UNSOL_OEM_GPS_GANSS_MEAS_POS_MSG, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_GANSS_MEAS_POS_MSG ) },
    { RIL_UNSOL_OEM_GPS_CDMA_GPS_POWER_ON, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_CDMA_GPS_POWER_ON ) },
    { RIL_UNSOL_OEM_GPS_CDMA_SEND_ACQUSITION_ASSIT_DATA, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_CDMA_SEND_ACQUSITION_ASSIT_DATA ) },
    { RIL_UNSOL_OEM_GPS_CDMA_SESSION_CANCELLATION, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_CDMA_SESSION_CANCELLATION ) },
    { RIL_UNSOL_OEM_GPS_GANSS_AP_POS_CAP_REQ, std::make_pair(RIL_SERVICE_GPS, MSG_GPS_IND_GANSS_AP_POS_CAP_REQ ) },

    /* For WLan */
    { RIL_REQUEST_OEM_SIM_AUTHENTICATION, std::make_pair(RIL_SERVICE_WLAN, MSG_WLAN_SIM_AUTHENTICATE ) },
    { RIL_REQUEST_OEM_CANCEL_AVAILABLE_NETWORKS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_CANCEL_AVAILABLE_NETWORKS ) },
    { RIL_REQUEST_OEM_GET_FREQUENCY_INFO, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_FREQUENCY_INFO ) },

    /* For IF */
    { RIL_REQUEST_OEM_IF_EXECUTE_AM, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_IF_EXECUTE_AM ) },

    //AIMS support start ---------------------
    { RIL_REQUEST_OEM_AIMS_DIAL, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_DIAL ) },
    { RIL_REQUEST_OEM_AIMS_ANSWER, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_ANSWER ) },
    { RIL_REQUEST_OEM_AIMS_HANGUP, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_HANGUP ) },
    { RIL_REQUEST_OEM_AIMS_DEREGISTRATION, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_DEREGISTRATION ) },
    { RIL_REQUEST_OEM_AIMS_HIDDEN_MENU, std::make_pair(RIL_SERVICE_MISC,MSG_AIMS_HIDDEN_MENU ) },
    { RIL_REQUEST_OEM_AIMS_ADD_PDN_INFO, std::make_pair(RIL_SERVICE_MISC, MSG_AIMS_ADD_PDN_INFO ) },
    { RIL_REQUEST_OEM_AIMS_CALL_MANAGE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_CALL_MANAGE ) },
    { RIL_REQUEST_OEM_AIMS_SEND_DTMF, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SEND_DTMF ) },
    { RIL_REQUEST_OEM_AIMS_SET_FRAME_TIME, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_FRAME_TIME ) },
    { RIL_REQUEST_OEM_AIMS_GET_FRAME_TIME, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_GET_FRAME_TIME ) },
    { RIL_REQUEST_OEM_AIMS_CALL_MODIFY, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_CALL_MODIFY ) },
    { RIL_REQUEST_OEM_AIMS_RESPONSE_CALL_MODIFY, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RESPONSE_CALL_MODIFY ) },
    { RIL_REQUEST_OEM_AIMS_TIME_INFO, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_TIME_INFO ) },
    { RIL_REQUEST_OEM_AIMS_CONF_CALL_ADD_REMOVE_USER, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_CONF_CALL_ADD_REMOVE_USER ) },
    { RIL_REQUEST_OEM_AIMS_ENHANCED_CONF_CALL, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_ENHANCED_CONF_CALL ) },
    { RIL_REQUEST_OEM_AIMS_GET_CALL_FORWARD_STATUS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_GET_CALL_FORWARD_STATUS ) },
    { RIL_REQUEST_OEM_AIMS_SET_CALL_FORWARD_STATUS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_CALL_FORWARD_STATUS ) },
    { RIL_REQUEST_OEM_AIMS_GET_CALL_WAITING, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_GET_CALL_WAITING ) },
    { RIL_REQUEST_OEM_AIMS_SET_CALL_WAITING, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_CALL_WAITING ) },
    { RIL_REQUEST_OEM_AIMS_GET_CALL_BARRING, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_GET_CALL_BARRING ) },
    { RIL_REQUEST_OEM_AIMS_SET_CALL_BARRING, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_CALL_BARRING ) },
    { RIL_REQUEST_OEM_AIMS_SEND_SMS, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_AIMS_SEND_SMS ) },
    { RIL_REQUEST_OEM_AIMS_SEND_EXPECT_MORE, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_AIMS_SEND_EXPECT_MORE ) },
    { RIL_REQUEST_OEM_AIMS_SEND_SMS_ACK, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_AIMS_SEND_SMS_ACK ) },
    { RIL_REQUEST_OEM_AIMS_SEND_ACK_INCOMING_SMS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_AIMS_SEND_ACK_INCOMING_SMS ) },
    { RIL_REQUEST_OEM_AIMS_CHG_BARRING_PWD, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_CHG_BARRING_PWD ) },
    { RIL_REQUEST_OEM_AIMS_SEND_USSD_INFO, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SEND_USSD_INFO ) },
    { RIL_REQUEST_OEM_AIMS_GET_PRESENTATION_SETTINGS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_GET_PRESENTATION_SETTINGS ) },
    { RIL_REQUEST_OEM_AIMS_SET_PRESENTATION_SETTINGS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_PRESENTATION_SETTINGS ) },
    { RIL_REQUEST_OEM_AIMS_SET_SELF_CAPABILITY, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_SELF_CAPABILITY ) },
    { RIL_REQUEST_OEM_AIMS_HO_TO_WIFI_READY, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_HO_TO_WIFI_READY ) },
    { RIL_REQUEST_OEM_AIMS_HO_TO_WIFI_CANCEL_IND, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_HO_TO_WIFI_CANCEL_IND ) },
    { RIL_REQUEST_OEM_AIMS_HO_PAYLOAD_IND, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_PAYLOAD_INFO_IND ) },
    { RIL_REQUEST_OEM_AIMS_HO_TO_3GPP, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_HO_TO_3GPP ) },
    { RIL_REQUEST_OEM_AIMS_SEND_ACK_INCOMING_CDMA_SMS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_AIMS_SEND_ACK_INCOMING_CDMA_SMS ) },
    { RIL_REQUEST_OEM_AIMS_MEDIA_STATE_IND, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_MEDIA_STATE_IND ) },
    { RIL_REQUEST_OEM_AIMS_DEL_PDN_INFO, std::make_pair(RIL_SERVICE_MISC, MSG_AIMS_DEL_PDN_INFO ) },
    { RIL_REQUEST_OEM_AIMS_STACK_START_REQ, std::make_pair(RIL_SERVICE_MISC, MSG_AIMS_STACK_START_REQ ) },
    { RIL_REQUEST_OEM_AIMS_STACK_STOP_REQ, std::make_pair(RIL_SERVICE_MISC, MSG_AIMS_STACK_STOP_REQ ) },
    { RIL_REQUEST_OEM_AIMS_XCAPM_START_REQ, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_XCAPM_START_REQ ) },
    { RIL_REQUEST_OEM_AIMS_XCAPM_STOP_REQ, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_XCAPM_STOP_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RTT_SEND_TEXT, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RTT_SEND_TEXT ) },
    { RIL_REQUEST_OEM_AIMS_EXIT_EMERGENCY_CB_MODE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_EXIT_EMERGENCY_CB_MODE ) },
    { RIL_REQUEST_OEM_AIMS_SET_GEO_LOCATION_INFO, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_GEO_LOCATION_INFO ) },
    { RIL_REQUEST_OEM_AIMS_CDMA_SEND_SMS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_CDMA_SEND_SMS ) },
    { RIL_REQUEST_OEM_AIMS_RCS_MULTI_FRAME, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_MULTI_FRAME_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_CHAT, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_CHAT_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_GROUP_CHAT, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_GROUP_CHAT_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_OFFLINE_MODE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_OFFLINE_MODE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_FILE_TRANSFER, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_FILE_TRANSFER_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_COMMON_MESSAGE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_COMMON_MESSAGE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_CONTENT_SHARE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_CONTENT_SHARE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_PRESENCE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_PRESENCE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_XCAP_MANAGE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_XCAP_MANAGE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_CONFIG_MANAGE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_CONFIG_MANAGE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_RCS_TLS_MANAGE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_RCS_TLS_MANAGE_REQ ) },
    { RIL_REQUEST_OEM_AIMS_SET_PDN_EST_STATUS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_PDN_EST_STATUS ) },
    { RIL_REQUEST_OEM_AIMS_SET_HIDDEN_MENU_ITEM, std::make_pair(RIL_SERVICE_MISC, MSG_AIMS_SET_HIDDEN_MENU_ITEM ) },
    { RIL_REQUEST_OEM_AIMS_GET_HIDDEN_MENU_ITEM, std::make_pair(RIL_SERVICE_MISC, MSG_AIMS_GET_HIDDEN_MENU_ITEM ) },
    { RIL_REQUEST_OEM_AIMS_SET_RTP_RX_STATISTICS, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_SET_RTP_RX_STATISTICS ) },
    { RIL_UNSOL_OEM_AIMS_MEDIA_STATUS, std::make_pair(RIL_SERVICE_IMS, MSG_IND_AIMS_MEDIA_STATUS ) },
    //AIMS support end ---------------------

    //WFC
    { RIL_REQUEST_OEM_WFC_MEDIA_CHANNEL_CONFIG, std::make_pair(RIL_SERVICE_IMS, MSG_WFC_MEDIA_CHANNEL_CONFIG ) },
    { RIL_REQUEST_OEM_WFC_DTMF_START, std::make_pair(RIL_SERVICE_IMS, MSG_WFC_DTMF_START ) },
    { RIL_REQUEST_OEM_WFC_SET_VOWIFI_HO_THRESHOLD, std::make_pair(RIL_SERVICE_IMS, MSG_WFC_SET_VOWIFI_HO_THRESHOLD ) },

    // Secure Element
    { RIL_REQUEST_OEM_SIM_OPEN_CHANNEL, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OEM_OPEN_CHANNEL ) },
    { RIL_REQUEST_OEM_SIM_TRANSMIT_APDU_LOGICAL, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OEM_TRANSMIT_APDU_LOGICAL ) },
    { RIL_REQUEST_OEM_SIM_TRANSMIT_APDU_BASIC, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OEM_TRNASMIT_APDU_BASIC ) },
    { RIL_REQUEST_OEM_SIM_PRESENT, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OEM_GET_CARD_PRESENT ) },

    /* eMBMS */
    { RIL_REQUEST_OEM_EMBMS_ENABLE_SERVICE, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_ENABLE_SERVICE) },
    { RIL_REQUEST_OEM_EMBMS_DISABLE_SERVICE, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_DISABLE_SERVICE) },
    { RIL_REQUEST_OEM_EMBMS_SET_SESSION, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_SET_SESSION) },
    { RIL_REQUEST_OEM_EMBMS_GET_SESSION_LIST, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_GET_SESSION_LIST) },
    { RIL_REQUEST_OEM_EMBMS_GET_SIGNAL_STRENGTH, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_GET_SIGNAL_STRENGTH) },
    { RIL_REQUEST_OEM_EMBMS_GET_NETWORK_TIME, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_GET_NETWORK_TIME) },
    { RIL_REQUEST_OEM_EMBMS_CHECK_AVAIABLE_EMBMS, std::make_pair(RIL_SERVICE_EMBMS, MSG_EMBMS_CHECK_AVAIABLE_EMBMS) },

    //SENSOR
    { RIL_REQUEST_OEM_PSENSOR_SET_STATUS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_PSENSOR_STATUS ) },

    //VSIM
    { RIL_REQUEST_OEM_VSIM_NOTIFICATION, std::make_pair(RIL_SERVICE_VSIM, MSG_VSIM_NOTIFICATION ) },
    { RIL_REQUEST_OEM_VSIM_OPERATION, std::make_pair(RIL_SERVICE_VSIM, MSG_VSIM_OPERATION ) },

    //SAR
    { RIL_REQUEST_OEM_SAR_SET_STATE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_SAR_STATE ) },
    { RIL_REQUEST_OEM_SAR_GET_STATE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_SAR_STATE ) },

    { RIL_REQUEST_OEM_SET_UICC_SUBSCRIPTION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_UICC ) },

    //SELFLOG
    { RIL_REQUEST_OEM_SET_SELFLOG, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_SELFLOG ) },
    { RIL_REQUEST_OEM_GET_SELFLOG_STATUS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_SELFLOG_STATUS ) },
    // CP Sleep Log
    { RIL_REQUEST_OEM_SET_MODEM_LOG_DUMP, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_MODEM_LOG_DUMP ) },

    // RSSI Scan
    { RIL_REQUEST_OEM_SCAN_RSSI, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SCAN_RSSI ) },
    { RIL_REQUEST_OEM_FORWARDING_AT_COMMAND, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_FORWARDING_AT_COMMAND ) },

    // SE13 Table
    { RIL_REQUEST_OEM_GET_PLMN_NAME_FROM_SE13TABLE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_PLMN_NAME_FROM_SE13TABLE ) },

    { RIL_REQUEST_OEM_TS25TABLE_DUMP, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_TS25TABLE_DUMP ) },

    { RIL_REQUEST_OEM_GET_RADIO_NODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_RADIO_NODE ) },
    { RIL_REQUEST_OEM_SET_RADIO_NODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_RADIO_NODE ) },
    { RIL_REQUEST_OEM_GET_PROVISION_UPDATE_REQUEST, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_PROVISION_UPDATE_REQUEST ) },
    { RIL_REQUEST_OEM_SET_PROVISION_UPDATE_DONE_REQUEST, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_PROVISION_UPDATE_DONE_REQUEST ) },
    { RIL_REQUEST_OEM_RADIO_CONFIG_RESET, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_RADIO_CONFIG_RESET ) },

    // Modem status
    { RIL_REQUEST_OEM_MODEM_INFO, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_MODEM_INFO ) },
    // Modem restart
    { RIL_REQUEST_OEM_MODEM_RESET, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_MODEM_RESET ) },
    // RTP
    { RIL_REQUEST_OEM_SET_RTP_PKTLOSS_THRESHOLD, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_RTP_PKTLOSS_THRESHOLD ) },

    { RIL_REQUEST_OEM_SWITCH_MODEM_FUNCTION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_FUNC_SWITCH_REQ ) },
    { RIL_REQUEST_OEM_REQ_SET_PDCP_DISCARD_TIMER, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_PDCP_DISCARD_TIMER ) },
    { RIL_REQUEST_OEM_GET_CQI_INFO, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_CQI_INFO ) },
    { RIL_REQUEST_OEM_SET_SAR_SETTING, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_SAR_SETTING ) },
    { RIL_REQUEST_OEM_SET_IMS_TEST_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_IMS_TEST_MODE ) },
    { RIL_REQUEST_OEM_SET_GMO_SWITCH, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_GMO_SWITCH ) },
    { RIL_REQUEST_OEM_SET_TCS_FCI, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_TCS_FCI_REQ ) },
    { RIL_REQUEST_OEM_GET_TCS_FCI, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_GET_TCS_FCI_INFO ) },
    { RIL_REQUEST_OEM_SET_CA_BANDWIDTH_FILTER, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_CA_BW_FILTER ) },
    { RIL_REQUEST_OEM_ICC_DEPERSONALIZATION, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OEM_ICC_DEPERSONALIZATION ) },
    { RIL_REQUEST_OEM_SET_ELEVATOR_SENSOR, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_ELEVATOR_SENSOR ) },
    { RIL_REQUEST_OEM_SET_SELFLOG_PROFILE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_SELFLOG_PROFILE ) },
    { RIL_REQUEST_OEM_GET_AVAILABLE_NETWORKS, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_QUERY_AVAILABLE_NETWORKS ) },
    { RIL_REQUEST_OEM_SET_FORBID_LTE_CELL, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_OEM_SET_FORBID_LTE_CELL ) },
};

#endif // __RIL_OEM_COMMANDS_H__
