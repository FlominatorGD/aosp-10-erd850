/*
 * Copyright Samsung Electronics Co., LTD.
 *
 * This software is proprietary of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 */

#ifndef __RIL_COMMANDS_H__
#define __RIL_COMMANDS_H__
/*
 * ril_commands.h
 *
 *  Created on: 2014. 7. 11.
 *      Author: sungwoo48.choi
 */
// { RIL_REQUEST_ID, std::make_pair(SERVICE_ID, MSG_ID) }

#include <map>

using namespace std;
typedef std::map<UINT, std::pair<UINT, UINT>> RouteMap;

RouteMap s_RilRequestServiceMap = {
    { RIL_REQUEST_GET_SIM_STATUS, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_STATUS ) },
    { RIL_REQUEST_ENTER_SIM_PIN, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_VERIFY_PIN ) },
    { RIL_REQUEST_ENTER_SIM_PUK, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_VERIFY_PUK ) },
    { RIL_REQUEST_ENTER_SIM_PIN2, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_VERIFY_PIN2 ) },
    { RIL_REQUEST_ENTER_SIM_PUK2, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_VERIFY_PUK2 ) },
    { RIL_REQUEST_CHANGE_SIM_PIN, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_CHANGE_PIN ) },
    { RIL_REQUEST_CHANGE_SIM_PIN2, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_CHANGE_PIN2 ) },
    { RIL_REQUEST_ENTER_NETWORK_DEPERSONALIZATION, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_VERIFY_NETWORK_LOCK ) },
    { RIL_REQUEST_GET_CURRENT_CALLS, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CALL_LIST ) },
    { RIL_REQUEST_DIAL, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CALL_DIAL ) },
    { RIL_REQUEST_DIAL_WITH_CALL_TYPE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CALL_DIAL ) },
    { RIL_REQUEST_GET_IMSI, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_IMSI ) },
    { RIL_REQUEST_HANGUP, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CALL_HANGUP ) },
    { RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_HANGUP_WAITING_OR_BACKGROUND ) },
    { RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_HANGUP_FOREGROUND_RESUME_BACKGROUND ) },
    { RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE ) },
    { RIL_REQUEST_CONFERENCE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_CONFERENCE ) },
    { RIL_REQUEST_UDUB, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_UDUB ) },
    { RIL_REQUEST_LAST_CALL_FAIL_CAUSE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_LAST_CALL_FAIL_CAUSE ) },
    { RIL_REQUEST_SIGNAL_STRENGTH, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SIGNAL_STR ) },
    { RIL_REQUEST_VOICE_REGISTRATION_STATE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_VOICE_REGISTRATION_STATE ) },
    { RIL_REQUEST_DATA_REGISTRATION_STATE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_DATA_REGISTRATION_STATE ) },
    { RIL_REQUEST_OPERATOR, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OPERATOR ) },
    { RIL_REQUEST_RADIO_POWER, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_RADIO_POWER ) },
    { RIL_REQUEST_DTMF, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_DTMF ) },
    { RIL_REQUEST_SEND_SMS, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_SEND ) },
    { RIL_REQUEST_SEND_SMS_EXPECT_MORE, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_SEND_MORE ) },
    { RIL_REQUEST_SETUP_DATA_CALL, std::make_pair(RIL_SERVICE_PS, MSG_PS_SETUP_DATA_CALL ) },
    { RIL_REQUEST_SIM_IO, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_IO ) },
    { RIL_REQUEST_SEND_USSD, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_SEND_USSD ) },
    { RIL_REQUEST_CANCEL_USSD, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_CANCEL_USSD ) },
    { RIL_REQUEST_GET_CLIR, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_GET_CLIR ) },
    { RIL_REQUEST_SET_CLIR, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_SET_CLIR ) },
    { RIL_REQUEST_QUERY_CALL_FORWARD_STATUS, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_QUERY_CALL_FORWARDING ) },
    { RIL_REQUEST_SET_CALL_FORWARD, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_SET_CALL_FORWARDING ) },
    { RIL_REQUEST_QUERY_CALL_WAITING, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_QUERY_CALL_WAITING ) },
    { RIL_REQUEST_SET_CALL_WAITING, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_SET_CALL_WAITING ) },
    { RIL_REQUEST_SMS_ACKNOWLEDGE , std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SMS_ACKNOWLEDGE ) },
    { RIL_REQUEST_GET_IMEI, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_IMEI ) },
    { RIL_REQUEST_GET_IMEISV, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_IMEISV ) },
    { RIL_REQUEST_ANSWER, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CALL_ANSWER ) },
    { RIL_REQUEST_DEACTIVATE_DATA_CALL, std::make_pair(RIL_SERVICE_PS, MSG_PS_DEACT_DATA_CALL ) },
    { RIL_REQUEST_DEACTIVATE_DATA_CALL_WITH_REASON, std::make_pair(RIL_SERVICE_PS, MSG_PS_DEACT_DATA_CALL ) },
    { RIL_REQUEST_QUERY_FACILITY_LOCK, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_FACILITY_LOCK ) },
    { RIL_REQUEST_SET_FACILITY_LOCK, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_SET_FACILITY_LOCK ) },
    { RIL_REQUEST_CHANGE_BARRING_PASSWORD, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_CALL_BARRING_PWD ) },
    { RIL_REQUEST_CHANGE_BARRING_PASSWORD_OVER_MMI, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_CALL_BARRING_PWD ) },
    { RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_QUERY_NETWORK_SELECTION_MODE ) },
    { RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_NETWORK_SELECTION_AUTO ) },
    { RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_NETWORK_SELECTION_MANUAL ) },
    { RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL_WITH_RAT, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_NETWORK_SELECTION_MANUAL_WITH_RAT ) },
    { RIL_REQUEST_QUERY_AVAILABLE_NETWORKS, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_QUERY_AVAILABLE_NETWORKS ) },
    { RIL_REQUEST_QUERY_BPLMN_SEARCH, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_QUERY_BPLMN_SEARCH ) },
    { RIL_REQUEST_DTMF_START, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_DTMF_START ) },
    { RIL_REQUEST_DTMF_STOP, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_DTMF_STOP ) },
    { RIL_REQUEST_BASEBAND_VERSION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_BASEBAND_VER ) },
    { RIL_REQUEST_SEPARATE_CONNECTION, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_SEPARATE_CONNECTION ) },
    { RIL_REQUEST_SET_MUTE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SOUND_SET_MUTE ) },
    { RIL_REQUEST_GET_MUTE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SOUND_GET_MUTE ) },
    { RIL_REQUEST_QUERY_CLIP, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_GET_CLIP ) },
    { RIL_REQUEST_LAST_DATA_CALL_FAIL_CAUSE, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_DATA_CALL_LIST, std::make_pair(RIL_SERVICE_PS, MSG_PS_GET_DATA_CALL_LIST ) },
    { RIL_REQUEST_RESET_RADIO, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_OEM_HOOK_RAW, std::make_pair(0, 0 ) },
    { RIL_REQUEST_OEM_HOOK_STRINGS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SCREEN_STATE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SCREEN ) },
    { RIL_REQUEST_SEND_DEVICE_STATE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SEND_DEVICE_STATE) },
    { RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_SUPP_SVC_NOTIFICATION ) },
    { RIL_REQUEST_WRITE_SMS_TO_SIM, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_WRITE_SMS_TO_SIM ) },
    { RIL_REQUEST_DELETE_SMS_ON_SIM, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_DELETE_SMS_ON_SIM ) },
    { RIL_REQUEST_SET_BAND_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_BAND_MODE ) },
    { RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_QUERY_AVAILABLE_BAND_MODE ) },
    { RIL_REQUEST_STK_GET_PROFILE, std::make_pair(RIL_SERVICE_SIM, 0 ) },
    { RIL_REQUEST_STK_SET_PROFILE, std::make_pair(RIL_SERVICE_SIM, 0 ) },
    { RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND, std::make_pair(RIL_SERVICE_STK, MSG_SAT_SEND_ENVELOPE_CMD ) },
    { RIL_REQUEST_STK_SEND_TERMINAL_RESPONSE, std::make_pair(RIL_SERVICE_STK, MSG_SAT_SEND_TERMINAL_RSP ) },
    { RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM, std::make_pair(RIL_SERVICE_STK, MSG_SAT_STK_HANDLE_CALL_SETUP_REQ_FROM_SIM ) },
    { RIL_REQUEST_EXPLICIT_CALL_TRANSFER, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_EXPLICIT_CALL_TRANSFER ) },
    { RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_PREF_NETWORK_TYPE ) },
    { RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_PREF_NETWORK_TYPE) },
    { RIL_REQUEST_GET_NEIGHBORING_CELL_IDS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_NEIGHBORING_CELL_IDS ) },
    { RIL_REQUEST_SET_LOCATION_UPDATES, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_LOCATION_UPDATES ) },
    { RIL_REQUEST_SET_TTY_MODE, std::make_pair(RIL_SERVICE_AUDIO, MSG_MISC_SET_TTY ) },
    { RIL_REQUEST_QUERY_TTY_MODE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_QUERY_TTY ) },
    { RIL_REQUEST_CDMA_VALIDATE_AND_WRITE_AKEY, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_GSM_GET_BROADCAST_SMS_CONFIG, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_GET_BROADCAST_SMS_CONFIG ) },
    { RIL_REQUEST_GSM_SET_BROADCAST_SMS_CONFIG, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_SET_BROADCAST_SMS_CONFIG ) },
    { RIL_REQUEST_GSM_SMS_BROADCAST_ACTIVATION, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_BROADCAST_ACTIVATION ) },
    { RIL_REQUEST_DEVICE_IDENTITY, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_DEV_IDENTITY ) },
    { RIL_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_EXIT_EMERGENCY_CB_MODE ) },
    { RIL_REQUEST_GET_SMSC_ADDRESS, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_GET_SMSC_ADDRESS ) },
    { RIL_REQUEST_SET_SMSC_ADDRESS, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_SET_SMSC_ADDRESS ) },
    { RIL_REQUEST_REPORT_SMS_MEMORY_STATUS, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_REPORT_SMS_MEMORY_STATUS ) },
    { RIL_REQUEST_REPORT_STK_SERVICE_IS_RUNNING, std::make_pair(RIL_SERVICE_STK, MSG_SAT_STK_IS_RUNNING ) },
    { RIL_REQUEST_ISIM_AUTHENTICATION, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_ISIM_AUTH ) },
    { RIL_REQUEST_ACKNOWLEDGE_INCOMING_GSM_SMS_WITH_PDU, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SMS_ACK_WITH_PDU ) },
    { RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, std::make_pair(RIL_SERVICE_STK, MSG_SAT_SEND_ENVELOPE_STATUS ) },
    { RIL_REQUEST_VOICE_RADIO_TECH, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_VOICE_RADIO_TECH ) },
    { RIL_REQUEST_SET_INITIAL_ATTACH_APN, std::make_pair(RIL_SERVICE_PS, MSG_PS_REFRESH_INITIAL_ATTACH_APN ) },
    { RIL_REQUEST_SET_DATA_PROFILE, std::make_pair(RIL_SERVICE_PS, MSG_PS_SET_DATA_PROFILE ) },
    { RIL_REQUEST_IMS_REGISTRATION_STATE, std::make_pair(RIL_SERVICE_IMS, MSG_AIMS_GET_REGISTRATION) },
    { RIL_REQUEST_IMS_SEND_SMS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SIM_TRANSMIT_APDU_BASIC, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_TRANSMIT_APDU_BASIC ) },
    { RIL_REQUEST_SIM_OPEN_CHANNEL, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_OPEN_CHANNEL ) },
    { RIL_REQUEST_SIM_CLOSE_CHANNEL, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_CLOSE_CHANNEL ) },
    { RIL_REQUEST_SIM_TRANSMIT_APDU_CHANNEL, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_TRANSMIT_APDU_CHANNEL ) },
    { RIL_REQUEST_GET_CELL_INFO_LIST, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_CELL_INFO_LIST ) },
    { RIL_REQUEST_SET_UNSOL_CELL_INFO_LIST_RATE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_UNSOL_CELL_INFO_LIST_RATE ) },
#if (RIL_VERSION >= 10)
    { RIL_REQUEST_ALLOW_DATA, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_ALLOW_DATA) },
    { RIL_REQUEST_SHUTDOWN, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SHUTDOWN) },
    { RIL_REQUEST_SIM_AUTHENTICATION, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_SIM_AUTH) },
    { RIL_REQUEST_SET_UICC_SUBSCRIPTION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_UICC) },
    { RIL_REQUEST_GET_RADIO_CAPABILITY, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_RC_NTW_TYPE) },
    { RIL_REQUEST_SET_RADIO_CAPABILITY, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_RC_NTW_TYPE) },
    { RIL_REQUEST_GET_ACTIVITY_INFO, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_ACTIVITY_INFO) },
    /*  added */
    { RIL_REQUEST_START_LCE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_LCE_START ) },
    { RIL_REQUEST_STOP_LCE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_LCE_STOP ) },
    { RIL_REQUEST_PULL_LCEDATA, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_PULL_LCEDATA ) },
    { RIL_REQUEST_SET_CARRIER_RESTRICTIONS, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_SET_CARRIER_RESTRICTIONS ) },
    { RIL_REQUEST_GET_CARRIER_RESTRICTIONS, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_CARRIER_RESTRICTIONS ) },
    { RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_INDICATION_FILTER ) },
    { RIL_REQUEST_SET_SIM_CARD_POWER, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_SET_SIM_CARD_POWER ) },
    /* added in RIL_VERSION 15 */
    { RIL_REQUEST_SET_CARRIER_INFO_IMSI_ENCRYPTION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_CARRIER_INFO_IMSI_ENCRYPTION ) },
    { RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA ) },
    { RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_LINK_CAPACITY_REPORTING_CRITERIA ) },
    { RIL_REQUEST_START_NETWORK_SCAN, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_START_NETWORK_SCAN ) },
    { RIL_REQUEST_STOP_NETWORK_SCAN, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_STOP_NETWORK_SCAN ) },
    { RIL_REQUEST_START_KEEPALIVE, std::make_pair(RIL_SERVICE_PS, MSG_PS_START_KEEPALIVE ) },
    { RIL_REQUEST_STOP_KEEPALIVE, std::make_pair(RIL_SERVICE_PS, MSG_PS_STOP_KEEPALIVE ) },
    { RIL_REQUEST_GET_SMS_STORAGE_ON_SIM, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_GET_STORAGE_CAPACITY ) },
#endif
#if 0
    { RIL_REQUEST_GET_DATA_CALL_PROFILE, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SET_DATA_SUBSCRIPTION, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_GET_UICC_SUBSCRIPTION, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_GET_DATA_SUBSCRIPTION, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SET_SUBSCRIPTION_MODE, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SET_TRANSMIT_POWER, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SETUP_QOS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_RELEASE_QOS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_GET_QOS_STATUS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_MODIFY_QOS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_SUSPEND_QOS, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_RESUME_QOS, std::make_pair(-1, 0 ) },
#endif
    { RIL_REQUEST_NV_READ_ITEM, std::make_pair(-1, 0 ) },
    { RIL_REQUEST_NV_WRITE_ITEM, std::make_pair(-1, 0 ) },

    {RIL_REQUEST_SWITCH_VOICE_CALL, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SOUND_SWITCH_VOICE_CALL) },
    {RIL_REQUEST_QUERY_COLP, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_QUERY_COLP ) },
    {RIL_REQUEST_QUERY_COLR, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_QUERY_COLR ) },
    {RIL_REQUEST_GET_ALLOW_DATA_STATE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_PS_SERVICE ) },
    {RIL_REQUEST_SIM_GET_ATR, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_ATR ) },
    {RIL_REQUEST_READ_PB_ENTRY, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_READ_PB_ENTRY) },
    {RIL_REQUEST_UPDATE_PB_ENTRY, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_UPDATE_PB_ENTRY) },
    {RIL_REQUEST_GET_PB_STORAGE_INFO, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_PB_STORAGE_INFO) },
    {RIL_REQUEST_GET_PB_STORAGE_LIST, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_PB_STORAGE_LIST) },
    {RIL_REQUEST_GET_PB_ENTRY_INFO, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_PB_ENTRY_INFO) },
    {RIL_REQUEST_GET_3G_PB_CAPA, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_3G_PB_CAPA) },
    {RIL_REQUEST_SET_CALL_CONFIRM, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SET_CALL_CONFIRM) },
    {RIL_REQUEST_SEND_CALL_CONFIRM, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SEND_CALL_CONFIRM) },
    {RIL_REQUEST_SEND_ENCODED_USSD, std::make_pair(RIL_SERVICE_SUPPLEMENTARY, MSG_SS_SEND_ENCODED_USSD ) },
    {RIL_REQUEST_SET_UPLMN, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_UPLMN ) },
    {RIL_REQUEST_GET_UPLMN, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_UPLMN ) },
    {RIL_REQUEST_SET_DS_NETWORK_TYPE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_DS_NTW_TYPE ) },
    {RIL_REQUEST_SET_WBAMR_CAPABILITY, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_WB_AMR_SET_CAPABILITY) },
    {RIL_REQUEST_GET_WBAMR_CAPABILITY, std::make_pair(RIL_SERVICE_AUDIO, MSG_AUDIO_WB_AMR_GET_CAPABILITY) },
    {RIL_REQUEST_GET_DUPLEX_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_DUPLEX_MODE ) },
    {RIL_REQUEST_SET_DUPLEX_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_DUPLEX_MODE ) },
    {RIL_LOCAL_REQUEST_VSIM_NOTIFICATION, std::make_pair(RIL_SERVICE_VSIM, MSG_VSIM_NOTIFICATION) },
    {RIL_LOCAL_REQUEST_VSIM_OPERATION, std::make_pair(RIL_SERVICE_VSIM, MSG_VSIM_OPERATION) },
    {RIL_REQUEST_QUERY_AVAILABLE_EMERGENCY_CALL_STATUS, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_QUERY_AVAILABLE_EMERGENCY_CALL_STATUS) },
    {RIL_REQUEST_SET_EMERGENCY_CALL_STATUS, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_EMERGENCY_CALL_STATUS) },
    {RIL_REQUEST_SET_FEMTO_CELL_SRCH, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_MC_SRCH ) },
    {RIL_REQUEST_SET_VOICE_OPERATION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_VOICE_OPERATION ) },
    {RIL_REQUEST_SET_DUAL_NETWORK_AND_ALLOW_DATA, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_DUAL_NTW_AND_ALLOW_DATA) },
    // Radio Config
    {RIL_REQUEST_GET_SLOT_STATUS, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_SLOT_STATUS) },
    {RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING) },
    {RIL_REQUEST_GET_PHONE_CAPABILITY, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_PHONE_CAPABILITY) },
    {RIL_REQUEST_SET_PREFERRED_DATA_MODEM, std::make_pair(RIL_SERVICE_PS, MSG_PS_SET_PREFERRED_DATA_MODEM) },
    {RIL_REQUEST_SET_MODEMS_CONFIG, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_MODEMS_CONFIG) },

    // Call & SS
    { RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE ) },
    { RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE ) },
    { RIL_REQUEST_CDMA_FLASH, std::make_pair(RIL_SERVICE_CSC, MSG_CS_SS_CDMA_FLASH ) },
    { RIL_REQUEST_CDMA_BURST_DTMF, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CDMA_BURST_DTMF ) },
    { RIL_REQUEST_EMERGENCY_DIAL, std::make_pair(RIL_SERVICE_CSC, MSG_CS_CALL_EMERGENCY_DIAL ) },

    // Network
    { RIL_REQUEST_SET_CDMA_HYBRID_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_SET_CDMA_HYBRID_MODE ) },
    { RIL_REQUEST_GET_CDMA_HYBRID_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_GET_CDMA_HYBRID_MODE ) },
    { RIL_REQUEST_CDMA_SET_ROAMING_PREFERENCE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_CDMA_SET_ROAMING ) },
    { RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_CDMA_QUERY_ROAMING ) },

    // SMS
    { RIL_REQUEST_CDMA_SEND_SMS, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_CDMA_SEND ) },
    { RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SMS_CDMA_ACKNOWLEDGE ) },
    { RIL_REQUEST_CDMA_GET_BROADCAST_SMS_CONFIG, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_CDMA_GET_BROADCAST_SMS_CONFIG ) },
    { RIL_REQUEST_CDMA_SET_BROADCAST_SMS_CONFIG, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_CDMA_SET_BROADCAST_SMS_CONFIG ) },
    { RIL_REQUEST_CDMA_SMS_BROADCAST_ACTIVATION, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_CDMA_BROADCAST_ACTIVATION ) },
    { RIL_REQUEST_CDMA_WRITE_SMS_TO_RUIM, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_CDMA_WRITE_SMS_TO_RUIM ) },
    { RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM, std::make_pair(RIL_SERVICE_SMS, MSG_SMS_CDMA_DELETE_SMS_ON_RUIM ) },

    // SIM & SAT
    { RIL_REQUEST_CDMA_GET_SUBSCRIPTION_SOURCE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_CDMA_GET_SUBSCRIPT_SOURCE) },
    { RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_CDMA_SET_SUBSCRIPT_SOURCE) },
    { RIL_REQUEST_CDMA_SUBSCRIPTION, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_CDMA_SUBSCRIPTION) },

    // Misc
    { RIL_REQUEST_GET_HARDWARE_CONFIG, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_HARDWARE_CONFIG ) },
    { RIL_REQUEST_EMULATE_IND, std::make_pair(RIL_SERVICE_TEST, MSG_DEBUG_TRIGGER_IND) },
    { RIL_REQUEST_GET_SIM_LOCK_STATUS, std::make_pair(RIL_SERVICE_SIM, MSG_SIM_GET_SIM_LOCK_INFO) },
    { RIL_REQUEST_SET_DEVICE_INFO, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_DEVICE_INFO) },
    { RIL_REQUEST_ENABLE_MODEM, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_ENABLE_MODEM) },
    { RIL_REQUEST_GET_MODEM_STATUS, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_GET_MODEM_STACK_STATUS) },
    { RIL_REQUEST_SET_ACTIVATE_VSIM, std::make_pair(RIL_SERVICE_MISC, MSG_MISC_SET_ACTIVATE_VSIM) },
    { RIL_REQUEST_SET_ENDC_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_SET_ENDC_MODE) },
    { RIL_REQUEST_GET_ENDC_MODE, std::make_pair(RIL_SERVICE_NETWORK, MSG_NET_OEM_GET_ENDC_MODE) },
};
#endif // __RIL_COMMANDS_H__
