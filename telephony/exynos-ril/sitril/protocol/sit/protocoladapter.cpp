/*
 * Copyright Samsung Electronics Co., LTD.
 *
 * This software is proprietary of Samsung Electronics.
 * No part of this software, either material or conceptual may be copied or distributed, transmitted,
 * transcribed, stored in a retrieval system or translated into any human or computer language in any form by any means,
 * electronic, mechanical, manual or otherwise, or disclosed
 * to third parties without the express written permission of Samsung Electronics.
 */

#include "protocoladapter.h"
#include "rillog.h"

// add category to display selective logs
#undef RilLogI
#define RilLogI(format, ...) CRilLog::Log(RIL_LOG_CAT_CORE, CRilLog::E_RIL_INFO_LOG,  format, ##__VA_ARGS__)
#undef RilLogV
#define RilLogV(format, ...) CRilLog::Log(RIL_LOG_CAT_CORE, CRilLog::E_RIL_VERBOSE_LOG,  format, ##__VA_ARGS__)
#undef RilLogW
#define RilLogW(format, ...) CRilLog::Log(RIL_LOG_CAT_CORE, CRilLog::E_RIL_WARNING_LOG,  format, ##__VA_ARGS__)
#undef RilLogE
#define RilLogE(format, ...) CRilLog::Log(RIL_LOG_CAT_CORE, CRilLog::E_RIL_CRITICAL_LOG,  format, ##__VA_ARGS__)

/**
 * ConvertProtocolErrorCodeToRilErrorCode
 * @param errorCode enum of Protocol Error Code
 * @return enum of RIL Error Code
 */
static int ConvertProtocolErrorCodeToRilErrorCode(int errorCode)
{
    // 0 ~ 17, same to RIL Error Code and Protocol Error Code
    if ((int)RCM_E_SUCCESS <= errorCode && errorCode < (int)RCM_E_MAX) {
        switch(errorCode) {
            case RCM_E_UNDEFINED_CMD:
                return RIL_E_REQUEST_NOT_SUPPORTED;
            default:
                return errorCode;
        }
    }
    else {
        // TODO mapping other error code
    }
    return RIL_E_GENERIC_FAILURE;
}

const char * rcmMsgToString(int rcmId) {

    switch(rcmId) {
        case SIT_GET_CURRENT_CALLS: return "SIT_GET_CURRENT_CALLS";
        case SIT_DIAL: return "SIT_DIAL";
        case SIT_GET_LAST_CALL_FAIL_CAUSE: return "SIT_GET_LAST_CALL_FAIL_CAUSE";
        case SIT_DTMF: return "SIT_DTMF";
        case SIT_ANSWER: return "SIT_ANSWER";
        case SIT_DTMF_START: return "SIT_DTMF_START";
        case SIT_DTMF_STOP: return "SIT_DTMF_STOP";
        case SIT_SEND_EXPLICIT_CALL_TRANSFER: return "SIT_SEND_EXPLICIT_CALL_TRANSFER";
        case SIT_HANGUP: return "SIT_HANGUP";
        case SIT_IND_CALL_STATE_CHANGED: return "SIT_IND_CALL_STATE_CHANGED";
        case SIT_IND_CALL_RING: return "SIT_IND_CALL_RING";
        case SIT_SET_SRVCC_CALL_LIST: return "SIT_SET_SRVCC_CALL_LIST";
        case SIT_IND_SRVCC_HO: return "SIT_IND_SRVCC_HO";
        case SIT_IND_EMERGENCY_CALL_LIST: return "SIT_IND_EMERGENCY_CALL_LIST"; // 0x000D
        case SIT_CALL_CONFIRM_FEATURE_SET_REQ: return "SIT_CALL_CONFIRM_FEATURE_SET_REQ"; // 0x000E
        case SIT_CALL_CONFIRM: return "SIT_CALL_CONFIRM"; // 0x000F
        case SIT_IND_CALL_PRESENT_IND: return "SIT_IND_CALL_PRESENT_IND"; // 0x0010
        case SIT_IND_EMERGENCY_SUPPORT_RAT_MODE: return "SIT_IND_EMERGENCY_SUPPORT_RAT_MODE"; // 0x0018
        //case SIT_IND_STK_CC_SS: return "SIT_IND_STK_CC_SS";
        //case SIT_IND_STK_CC_ALPHA_NTF: return "SIT_IND_STK_CC_ALPHA_NTF";

        case SIT_SEND_SMS: return "SIT_SEND_SMS";
        case SIT_SEND_SMS_EXPECT_MORE: return "SIT_SEND_SMS_EXPECT_MORE";
        case SIT_SEND_SMS_ACK: return "SIT_SEND_SMS_ACK";
        case SIT_WRITE_SMS_TO_SIM: return "SIT_WRITE_SMS_TO_SIM";
        case SIT_DELETE_SMS_ON_SIM: return "SIT_DELETE_SMS_ON_SIM";
        case SIT_GET_BCST_SMS_CFG: return "SIT_GET_BCST_SMS_CFG";
        case SIT_SET_BCST_SMS_CFG: return "SIT_SET_BCST_SMS_CFG";
        case SIT_ACT_BCST_SMS: return "SIT_ACT_BCST_SMS";
        case SIT_GET_SMSC_ADDR: return "SIT_GET_SMSC_ADDR";
        case SIT_SET_SMSC_ADDR: return "SIT_SET_SMSC_ADDR";
        case SIT_SEND_SMS_MEM_STATUS: return "SIT_SEND_SMS_MEM_STATUS";
        case SIT_SEND_ACK_INCOMING_SMS: return "SIT_SEND_ACK_INCOMING_SMS";
        case SIT_IND_NEW_SMS: return "SIT_IND_NEW_SMS";
        case SIT_IND_NEW_SMS_STATUS_REPORT: return "SIT_IND_NEW_SMS_STATUS_REPORT";
        case SIT_IND_NEW_SMS_ON_SIM: return "SIT_IND_NEW_SMS_ON_SIM";
        case SIT_IND_SIM_SMS_STORAGE_FULL: return "SIT_IND_SIM_SMS_STORAGE_FULL";
        case SIT_IND_NEW_BCST_SMS: return "SIT_IND_NEW_BCST_SMS";
        case SIT_GET_STORED_SMS_COUNT: return "SIT_GET_STORED_SMS_COUNT";

        case SIT_GET_SIM_STATUS: return "SIT_GET_SIM_STATUS";
        case SIT_VERIFY_SIM_PIN: return "SIT_VERIFY_SIM_PIN";
        case SIT_VERIFY_SIM_PUK: return "SIT_VERIFY_SIM_PUK";
        case SIT_VERIFY_SIM_PIN2: return "SIT_VERIFY_SIM_PIN2";
        case SIT_VERIFY_SIM_PUK2: return "SIT_VERIFY_SIM_PUK2";
        case SIT_CHG_SIM_PIN: return "SIT_CHG_SIM_PIN";
        case SIT_CHG_SIM_PIN2: return "SIT_CHG_SIM_PIN2";
        case SIT_VERIFY_NETWORK_LOCK: return "SIT_VERIFY_NETWORK_LOCK";
        case SIT_SIM_IO: return "SIT_SIM_IO";
        case SIT_GET_FACILITY_LOCK: return "SIT_GET_FACILITY_LOCK";
        case SIT_SET_FACILITY_LOCK: return "SIT_SET_FACILITY_LOCK";
        case SIT_GET_SIM_AUTH: return "SIT_GET_SIM_AUTH";
        case SIT_TRANSMIT_SIM_APDU_BASIC: return "SIT_TRANSMIT_SIM_APDU_BASIC";
        case SIT_OPEN_SIM_CHANNEL: return "SIT_OPEN_SIM_CHANNEL";
        case SIT_OPEN_SIM_CHANNEL_WITH_P2: return "SIT_OPEN_SIM_CHANNEL_WITH_P2";
        case SIT_CLOSE_SIM_CHANNEL: return "SIT_CLOSE_SIM_CHANNEL";
        case SIT_TRANSMIT_SIM_APDU_CHANNEL: return "SIT_TRANSMIT_SIM_APDU_CHANNEL";
        case SIT_IND_SIM_STATUS_CHANGED: return "SIT_IND_SIM_STATUS_CHANGED";
        case SIT_GET_GBA_CONTEXT: return "SIT_GET_GBA_CONTEXT";
        case SIT_GET_ATR: return "SIT_GET_ATR";
        case SIT_READ_PB_ENTRY: return "SIT_READ_PB_ENTRY";
        case SIT_UPDATE_PB_ENTRY: return "SIT_UPDATE_PB_ENTRY";
        case SIT_GET_PB_STORAGE_INFO: return "SIT_GET_PB_STORAGE_INFO";
        case SIT_GET_PB_STORAGE_LIST: return "SIT_GET_PB_STORAGE_LIST";
        case SIT_GET_PB_ENTRY_INFO: return "SIT_GET_PB_ENTRY_INFO";
        case SIT_GET_3G_PB_CAPA: return "SIT_GET_3G_PB_CAPA";
        case SIT_IND_SIM_PB_READY: return "SIT_IND_SIM_PB_READY";
        case SIT_IND_ICCID_INFO: return "SIT_IND_ICCID_INFO";

        case SIT_SEND_STK_ENVELOPE_CMD: return "SIT_SEND_STK_ENVELOPE_CMD";
        case SIT_SEND_STK_TERMINAL_RSP: return "SIT_SEND_STK_TERMINAL_RSP";
        case SIT_SEND_STK_ENVELOPE_WITH_STATUS: return "SIT_SEND_STK_ENVELOPE_WITH_STATUS";
        case SIT_IND_STK_PROACTIVE_COMMAND: return "SIT_IND_STK_PROACTIVE_COMMAND";
        case SIT_IND_SIM_REFRESH: return "SIT_IND_SIM_REFRESH";
        case SIT_STK_CALL_SETUP: return "SIT_STK_CALL_SETUP";
        case SIT_IND_STK_SESSION_END: return "SIT_IND_STK_SESSION_END";

        case SIT_GET_IMSI: return "SIT_GET_IMSI";
        case SIT_GET_IMEI: return "SIT_GET_IMEI";
        case SIT_GET_IMEISV: return "SIT_GET_IMEISV";
        case SIT_GET_DEVICE_ID: return "SIT_GET_DEVICE_ID";
        case SIT_SET_SGC: return "SIT_SET_SGC";
        case SIT_OEM_SET_SVN: return "SIT_OEM_SET_SVN";

        case SIT_HANGUP_WAITING_OR_BACKGROUND: return "SIT_HANGUP_WAITING_OR_BACKGROUND";
        case SIT_HANGUP_FORGROUND_RESUME_BACKGROUND: return "SIT_HANGUP_FORGROUND_RESUME_BACKGROUND";
        case SIT_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE: return "SIT_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE";
        case SIT_CONFERENCE: return "SIT_CONFERENCE";
        case SIT_UDUB: return "SIT_UDUB";
        case SIT_SEND_USSD: return "SIT_SEND_USSD";
        case SIT_CANCEL_USSD: return "SIT_CANCEL_USSD";
        case SIT_GET_CLIR: return "SIT_GET_CLIR";
        case SIT_GET_COLP: return "SIT_GET_COLP";
        case SIT_GET_CALL_FORWARD_STATUS: return "SIT_GET_CALL_FORWARD_STATUS";
        case SIT_SET_CALL_FORWARD: return "SIT_SET_CALL_FORWARD";
        case SIT_GET_CALL_WAITING: return "SIT_GET_CALL_WAITING";
        case SIT_SET_CALL_WAITING: return "SIT_SET_CALL_WAITING";
        case SIT_CHG_BARRING_PWD: return "SIT_CHG_BARRING_PWD";
        case SIT_SEPARATE_CONNECTION: return "SIT_SEPARATE_CONNECTION";
        case SIT_GET_CLIP: return "SIT_GET_CLIP";
        case SIT_IND_ON_USSD: return "SIT_IND_ON_USSD";
        case SIT_IND_SUPP_SVC_NOTIFICATION: return "SIT_IND_SUPP_SVC_NOTIFICATION";
        case SIT_GET_COLR: return "SIT_GET_COLR";
        case SIT_IND_SS_RETURN_RESULT: return "SIT_IND_SS_RETURN_RESULT";

        case SIT_SETUP_DATA_CALL: return "SIT_SETUP_DATA_CALL";
        case SIT_DEACT_DATA_CALL: return "SIT_DEACT_DATA_CALL";
        case SIT_GET_DATA_CALL_LIST: return "SIT_GET_DATA_CALL_LIST";
        case SIT_SET_INITIAL_ATTACH_APN: return "SIT_SET_INITIAL_ATTACH_APN";
        case SIT_IND_DATA_CALL_LIST_CHANGED: return "SIT_IND_DATA_CALL_LIST_CHANGED";
        case SIT_SET_FD_INFO: return "SIT_SET_FD_INFO";
        case SIT_IND_DEDICATED_BEARER_INFO: return "SIT_IND_DEDICATED_BEARER_INFO";
        case SIT_IND_NAS_TIMER_STATUS: return "SIT_IND_NAS_TIMER_STATUS";
        case SIT_DETACH: return "SIT_DETACH";
        case SIT_IND_DATA_STATE_CHANGE: return "SIT_IND_DATA_STATE_CHANGE";
        case SIT_SET_DATA_PROFILE: return "SIT_SET_DATA_PROFILE";

        case SIT_GET_CS_REG_STATE: return "SIT_GET_CS_REG_STATE";
        case SIT_GET_PS_REG_STATE: return "SIT_GET_PS_REG_STATE";
        case SIT_GET_OPERATOR: return "SIT_GET_OPERATOR";
        case SIT_GET_NTW_MODE: return "SIT_GET_NTW_MODE";
        case SIT_SET_NTW_MODE_AUTO: return "SIT_SET_NTW_MODE_AUTO";
        case SIT_SET_NTW_MODE_MANUAL: return "SIT_SET_NTW_MODE_MANUAL";
        case SIT_GET_AVAILABLE_NETWORKS: return "SIT_GET_AVAILABLE_NETWORKS";
        case SIT_CANCEL_GET_AVAILABLE_NETWORKS: return "SIT_CANCEL_GET_AVAILABLE_NETWORKS";
        case SIT_SET_BAND_MODE: return "SIT_SET_BAND_MODE";
        case SIT_GET_BAND_MODE: return "SIT_GET_BAND_MODE";
        case SIT_SET_PREFERRED_NTW_TYPE: return "SIT_SET_PREFERRED_NTW_TYPE";
        case SIT_GET_PREFERRED_NTW_TYPE: return "SIT_GET_PREFERRED_NTW_TYPE";

        case SIT_GET_CELL_INFO_LIST: return "SIT_GET_CELL_INFO_LIST";
        case SIT_SET_CELL_INFO_LIST_REPORT_RATE: return "SIT_SET_CELL_INFO_LIST_REPORT_RATE";
        case SIT_IND_NTW_STATE_CHANGED: return "SIT_IND_NTW_STATE_CHANGED";
        case SIT_IND_CELL_INFO_LIST: return "SIT_IND_CELL_INFO_LIST";
        case SIT_SET_PS_SERVICE: return "SIT_SET_PS_SERVICE";
        case SIT_GET_PS_SERVICE: return "SIT_GET_PS_SERVICE";
        case SIT_SET_EMERGENCY_CALL_STATUS: return "SIT_SET_EMERGENCY_CALL_STATUS";
        case SIT_IND_EMERGENCY_ACT_INFO: return "SIT_IND_EMERGENCY_ACT_INFO";
        case SIT_SET_UPLMN: return "SIT_SET_UPLMN";
        case SIT_GET_UPLMN: return "SIT_GET_UPLMN";
        case SIT_SET_DS_NTW_TYPE: return "SIT_SET_DS_NTW_TYPE";
        case SIT_IND_NET_CURRENT_LTE_MODE: return "SIT_IND_NET_CURRENT_LTE_MODE";
        case SIT_GET_RADIO_CAPABILITY: return "SIT_GET_RADIO_CAPABILITY";
        case SIT_SET_RADIO_CAPABILITY: return "SIT_SET_RADIO_CAPABILITY";
        case SIT_GET_DUPLEX_MODE: return "SIT_GET_DUPLEX_MODE";
        case SIT_SET_DUPLEX_MODE: return "SIT_SET_DUPLEX_MODE";
        case SIT_IND_LTE_CA_CHANGED: return "SIT_IND_LTE_CA_CHANGED";
        case SIT_GET_LTE_CA_INFO: return "SIT_GET_LTE_CA_INFO";
        case SIT_GET_GSM_CELL_INFO: return "SIT_GET_GSM_CELL_INFO";
        case SIT_SET_MICRO_CELL_SEARCH: return "SIT_SET_MICRO_CELL_SEARCH";
        //case SIT_IND_RC_INFO_RECV: return "SIT_IND_RC_INFO_RECV";

        case SIT_SET_RADIO_POWER: return "SIT_SET_RADIO_POWER";
        case SIT_GET_RADIO_POWER: return "SIT_GET_RADIO_POWER";
        case SIT_IND_RADIO_STATE_CHANGED: return "SIT_IND_RADIO_STATE_CHANGED";
        case SIT_IND_RADIO_READY: return "SIT_IND_RADIO_READY";
        case SIT_IND_PHONE_RESET: return "SIT_IND_PHONE_RESET";

        case SIT_GET_SIGNAL_STRENGTH: return "SIT_GET_SIGNAL_STRENGTH";
        case SIT_GET_BASEBAND_VERSION: return "SIT_GET_BASEBAND_VERSION";
        case SIT_SET_SCREEN_STATE: return "SIT_SET_SCREEN_STATE";
        case SIT_SET_TTY_MODE: return "SIT_SET_TTY_MODE";
        case SIT_GET_TTY_MODE: return "SIT_GET_TTY_MODE";
        case SIT_IND_NITZ_TIME_RECEIVED: return "SIT_IND_NITZ_TIME_RECEIVED";
        case SIT_IND_SIGNAL_STRENGTH: return "SIT_IND_SIGNAL_STRENGTH";
        case SIT_SET_CFG_DEFAULT: return "SIT_SET_CFG_DEFAULT";
        case SIT_SET_ENG_MODE: return "SIT_SET_ENG_MODE";
        case SIT_SET_SCREEN_LINE: return "SIT_SET_SCREEN_LINE";
        case SIT_IND_DISPLAY_ENG: return "SIT_IND_DISPLAY_ENG";
        case SIT_SET_DEBUG_TRACE: return "SIT_SET_DEBUG_TRACE";
        case SIT_GET_ACTIVITY_INFO: return "SIT_GET_ACTIVITY_INFO";
        case SIT_SET_OPERATOR_INFO: return "SIT_SET_OPERATOR_INFO";
        case SIT_SET_ENG_STRING_INPUT: return "SIT_SET_ENG_STRING_INPUT";
        case SIT_GET_MSL_CODE: return "SIT_GET_MSL_CODE";
        case SIT_SET_PIN_CONTROL: return "SIT_SET_PIN_CONTROL";
        case SIT_IND_PIN_CONTROL: return "SIT_IND_PIN_CONTROL";
#if 0//removed
        case SIT_GET_OEM_NV_ITEM: return "SIT_GET_OEM_NV_ITEM";
        case SIT_SET_OEM_NV_ITEM: return "SIT_SET_OEM_NV_ITEM";
#endif
        case SIT_SET_PREFERRED_CALL_CAPABILITY: return "SIT_SET_PREFERRED_CALL_CAPABILITY";
        case SIT_GET_PREFERRED_CALL_CAPABILITY: return "SIT_GET_PREFERRED_CALL_CAPABILITY";
        case SIT_SET_SW_VERSION: return "SIT_SET_SW_VERSION";
        case SIT_SET_VOICE_OPERATION: return "SIT_SET_VOICE_OPERATION";
        case SIT_GET_VOICE_OPERATION: return "SIT_GET_VOICE_OPERATION";
        case SIT_SET_MODEM_CONFIG: return "SIT_SET_MODEM_CONFIG";

        case SIT_SET_MUTE: return "SIT_SET_MUTE";
        case SIT_GET_MUTE: return "SIT_GET_MUTE";
        case SIT_IND_RINGBACK_TONE: return "SIT_IND_RINGBACK_TONE";
        case SIT_SET_VOLUME: return "SIT_SET_VOLUME";
        case SIT_GET_VOLUME: return "SIT_GET_VOLUME";
        case SIT_SET_AUDIOPATH: return "SIT_SET_AUDIOPATH";
        case SIT_GET_AUDIOPATH: return "SIT_GET_AUDIOPATH";
        case SIT_SET_MULTI_MIC: return "SIT_SET_MULTI_MIC";
        case SIT_GET_MULTI_MIC: return "SIT_GET_MULTI_MIC";
        case SIT_SWITCH_VOICE_CALL_AUDIO: return "SIT_SWITCH_VOICE_CALL_AUDIO";
        case SIT_SET_AUDIO_CLK: return "SIT_SET_AUDIO_CLK";
        case SIT_SET_AUDIO_LOOPBACK: return "SIT_SET_AUDIO_LOOPBACK";
        case SIT_IND_WB_AMR_REPORT: return "SIT_IND_WB_AMR_REPORT";
        case SIT_SET_WB_CAPABILITY: return "SIT_SET_WB_CAPABILITY";
        case SIT_GET_WB_CAPABILITY: return "SIT_GET_WB_CAPABILITY";

        case SIT_SET_IMS_CONFIGURATION: return "SIT_SET_IMS_CONFIGURATION";
        case SIT_GET_IMS_CONFIGURATION: return "SIT_GET_IMS_CONFIGURATION";
        case SIT_IND_IMS_CONFIGURATION: return "SIT_IND_IMS_CONFIGURATION";
        case SIT_IND_IMS_DEDICATED_PDN: return "SIT_IND_IMS_DEDICATED_PDN";

        case SIT_SET_GPS_FREQUENCY_AIDING: return "SIT_SET_GPS_FREQUENCY_AIDING";
        case SIT_GET_LPP_SUPL_REQ_ECID_INFO: return "SIT_GET_LPP_SUPL_REQ_ECID_INFO";
        case SIT_GET_RRLP_SUPL_REQ_ECID_INFO: return "SIT_GET_RRLP_SUPL_REQ_ECID_INFO";
        case SIT_IND_GPS_MEASURE_POS_REQ: return "SIT_IND_GPS_MEASURE_POS_REQ";
        case SIT_IND_GPS_MEASURE_POSITION_RSP: return "SIT_IND_GPS_MEASURE_POSITION_RSP";
        case SIT_IND_GPS_ASSIST_DATA: return "SIT_IND_GPS_ASSIST_DATA";
        case SIT_IND_RELEASE_GPS: return "SIT_IND_RELEASE_GPS";
        case SIT_GPS_MO_LOCATION_REQUEST: return "SIT_GPS_MO_LOCATION_REQUEST";
        case SIT_IND_GPS_MT_LOCATION_REQUEST: return "SIT_IND_GPS_MT_LOCATION_REQUEST";
        case SIT_IND_RESET_GPS_ASSIST_DATA: return "SIT_IND_RESET_GPS_ASSIST_DATA";
        case SIT_GET_LPP_REQ_SERVING_CELL_INFO: return "SIT_GET_LPP_REQ_SERVING_CELL_INFO";
        case SIT_IND_LPP_REQUEST_CAPABILITIES: return "SIT_IND_LPP_REQUEST_CAPABILITIES";
        case SIT_LPP_PROVIDE_CAPABILITIES_IND: return "SIT_LPP_PROVIDE_CAPABILITIES_IND";
        case SIT_IND_LPP_REQUEST_ASSIST_DATA: return "SIT_IND_LPP_REQUEST_ASSIST_DATA";
        case SIT_IND_LPP_PROVIDE_ASSIST_DATA: return "SIT_IND_LPP_PROVIDE_ASSIST_DATA";
        case SIT_IND_LPP_REQUEST_LOCATION_INFO: return "SIT_IND_LPP_REQUEST_LOCATION_INFO";
        case SIT_LPP_PROVIDE_LOCATION_INFO_IND: return "SIT_LPP_PROVIDE_LOCATION_INFO_IND";
        case SIT_LPP_GPS_ERROR_IND: return "SIT_LPP_GPS_ERROR_IND";
        case SIT_IND_SUPL_LPP_DATA_INFO: return "SIT_IND_SUPL_LPP_DATA_INFO";
        case SIT_IND_SUPL_NI_MESSAGE: return "SIT_IND_SUPL_NI_MESSAGE";
        case SIT_SET_GPS_SUPL_NI_READY: return "SIT_SET_GPS_SUPL_NI_READY";
        case SIT_IND_3GPP_SEND_GANSS_ASSIT_DATA: return "SIT_IND_3GPP_SEND_GANSS_ASSIT_DATA";
        case SIT_IND_GANSS_MEAS_POS_MSG: return "SIT_IND_GANSS_MEAS_POS_MSG";
        case SIT_SET_GANSS_MEAS_POS_RSP: return "SIT_SET_GANSS_MEAS_POS_RSP";
        case SIT_IND_GANSS_AP_POS_CAP_REQ: return "SIT_IND_GANSS_AP_POS_CAP_REQ";
        case SIT_IND_GANSS_AP_POS_CAP_RSP: return "SIT_IND_GANSS_AP_POS_CAP_RSP";
        case SIT_GET_GSM_EXT_INFO_MSG: return "SIT_GET_GSM_EXT_INFO_MSG";
        case SIT_GPS_CONTROL_PLANE_ENABLE: return "SIT_GPS_CONTROL_PLANE_ENABLE";
        case SIT_GNSS_LPP_PROFILE_SET: return "SIT_GNSS_LPP_PROFILE_SET";
        case SIT_SET_GPS_LOCK_MODE: return "SIT_SET_GPS_LOCK_MODE";
        case SIT_GET_REFERENCE_LOCATION: return "SIT_GET_REFERENCE_LOCATION";
        case SIT_IND_CDMA_GPS_POWER_ON: return "SIT_IND_CDMA_GPS_POWER_ON";
        case SIT_SET_PSEUDO_RANGE_MEASUREMENTS: return "SIT_SET_PSEUDO_RANGE_MEASUREMENTS";
        case SIT_IND_CDMA_SEND_ACQUSITION_ASSIT_DATA: return "SIT_IND_CDMA_SEND_ACQUSITION_ASSIT_DATA";
        case SIT_IND_CDMA_SESSION_CANCELLATION: return "SIT_IND_CDMA_SESSION_CANCELLATION";
        case SIT_GET_CDMA_PRECISE_TIME_AIDING_INFO: return "SIT_GET_CDMA_PRECISE_TIME_AIDING_INFO";
        case SIT_GET_GPS_CDMA_FREQ_AIDING: return "SIT_GET_GPS_CDMA_FREQ_AIDING";
        case SIT_IND_GPS_START_MDT_LOC: return "SIT_IND_GPS_START_MDT_LOC";
        case SIT_GPS_RETRIEVE_LOC_INFO: return "SIT_GPS_RETRIEVE_LOC_INFO";
        case SIT_IND_LPP_UPDATE_UE_LOC_INFO: return "SIT_IND_LPP_UPDATE_UE_LOC_INFO";

        case SIT_GET_MANUAL_BAND_MODE: return "SIT_GET_MANUAL_BAND_MODE";
        case SIT_SET_MANUAL_BAND_MODE: return "SIT_SET_MANUAL_BAND_MODE";
        case SIT_GET_RF_DESENSE_MODE: return "SIT_GET_RF_DESENSE_MODE";
        case SIT_SET_RF_DESENSE_MODE: return "SIT_SET_RF_DESENSE_MODE";
        case SIT_OEM_STORE_ADB_SERIAL_NUMBER_REQ: return "SIT_OEM_STORE_ADB_SERIAL_NUMBER_REQ";
        case SIT_OEM_READ_ADB_SERIAL_NUMBER_REQ: return "SIT_OEM_READ_ADB_SERIAL_NUMBER_REQ";
        case SIT_SET_DUAL_NTW_AND_PS_TYPE: return "SIT_SET_DUAL_NTW_AND_PS_TYPE";
        case SIT_IND_TOTAL_OOS: return "SIT_IND_TOTAL_OOS";
        case SIT_IND_MCC: return "SIT_IND_MCC";
        case SIT_IND_SIM_DATA_INFO: return "SIT_IND_SIM_DATA_INFO";
        case SIT_IND_AC_BARRING_INFO: return "SIT_IND_AC_BARRING_INFO";

        //AIMS support start ---------------------
        case SIT_AIMS_DIAL: return "SIT_AIMS_DIAL";
        case SIT_IND_AIMS_CALL_RING: return "SIT_IND_AIMS_CALL_RING";
        case SIT_AIMS_ANSWER: return "SIT_AIMS_ANSWER";
        case SIT_AIMS_HANGUP: return "SIT_AIMS_HANGUP";
        case SIT_IND_AIMS_CALL_STATUS: return "SIT_IND_AIMS_CALL_STATUS";
        case SIT_IND_AIMS_REGISTRATION: return "SIT_IND_AIMS_REGISTRATION";
        case SIT_AIMS_DEREGISTRATION: return "SIT_AIMS_DEREGISTRATION";
        case SIT_AIMS_HIDDEN_MENU: return "SIT_AIMS_HIDDEN_MENU";
        case SIT_AIMS_ADD_PDN_INFO: return "SIT_AIMS_ADD_PDN_INFO";
        case SIT_AIMS_CALL_MANAGE: return "SIT_AIMS_CALL_MANAGE";
        case SIT_AIMS_SEND_DTMF: return "SIT_AIMS_SEND_DTMF";
        case SIT_AIMS_SET_FRAME_TIME: return "SIT_AIMS_SET_FRAME_TIME";
        case SIT_AIMS_GET_FRAME_TIME: return "SIT_AIMS_GET_FRAME_TIME";
        case SIT_AIMS_CALL_MODIFY: return "SIT_AIMS_CALL_MODIFY";
        case SIT_IND_AIMS_CALL_MODIFY: return "SIT_IND_AIMS_CALL_MODIFY";
        case SIT_AIMS_RESPONSE_CALL_MODIFY: return "SIT_AIMS_RESPONSE_CALL_MODIFY";
        case SIT_AIMS_TIME_INFO: return "SIT_AIMS_TIME_INFO";
        case SIT_IND_AIMS_FRAME_TIME: return "SIT_IND_AIMS_FRAME_TIME";
        case SIT_AIMS_CONF_CALL_ADD_REMOVE_USER: return "SIT_AIMS_CONF_CALL_ADD_REMOVE_USER";
        case SIT_AIMS_ENHANCED_CONF_CALL: return "SIT_AIMS_ENHANCED_CONF_CALL";
        case SIT_AIMS_GET_CALL_FORWARD_STATUS: return "SIT_AIMS_GET_CALL_FORWARD_STATUS";
        case SIT_AIMS_SET_CALL_FORWARD_STATUS: return "SIT_AIMS_SET_CALL_FORWARD_STATUS";
        case SIT_AIMS_GET_CALL_WAITING: return "SIT_AIMS_GET_CALL_WAITING";
        case SIT_AIMS_SET_CALL_WAITING: return "SIT_AIMS_SET_CALL_WAITING";
        case SIT_AIMS_GET_CALL_BARRING: return "SIT_AIMS_GET_CALL_BARRING";
        case SIT_AIMS_SET_CALL_BARRING: return "SIT_AIMS_SET_CALL_BARRING";
        case SIT_IND_AIMS_SUPP_SVC_NOTIFICATION: return "SIT_IND_AIMS_SUPP_SVC_NOTIFICATION";
        case SIT_AIMS_SEND_SMS: return "SIT_AIMS_SEND_SMS";
        case SIT_AIMS_SEND_EXPECT_MORE: return "SIT_AIMS_SEND_EXPECT_MORE";
        case SIT_AIMS_SEND_SMS_ACK: return "SIT_AIMS_SEND_SMS_ACK";
        case SIT_IND_AIMS_NEW_SMS: return "SIT_IND_AIMS_NEW_SMS";
        case SIT_AIMS_SEND_ACK_INCOMING_SMS: return "SIT_AIMS_SEND_ACK_INCOMING_SMS";
        case SIT_IND_AIMS_NEW_SMS_STATUS_REPORT: return "SIT_IND_AIMS_NEW_SMS_STATUS_REPORT";
        case SIT_IND_AIMS_ON_USSD: return "SIT_IND_AIMS_ON_USSD";
        case SIT_AIMS_CHG_BARRING_PWD: return "SIT_AIMS_CHG_BARRING_PWD";
        case SIT_IND_AIMS_CONFERENCE_CALL_EVENT: return "SIT_IND_AIMS_CONFERENCE_CALL_EVENT";
        case SIT_AIMS_SEND_USSD_INFO: return "SIT_AIMS_SEND_USSD_INFO";
        case SIT_AIMS_GET_PRESENTATION_SETTINGS: return "SIT_AIMS_GET_PRESENTATION_SETTINGS";
        case SIT_AIMS_SET_PRESENTATION_SETTINGS: return "SIT_AIMS_SET_PRESENTATION_SETTINGS";
        case SIT_AIMS_SET_SELF_CAPABILITY: return "SIT_AIMS_SET_SELF_CAPABILITY";
        case SIT_AIMS_HO_TO_WIFI_READY_REQ: return "SIT_AIMS_HO_TO_WIFI_READY_REQ";
        case SIT_AIMS_HO_TO_WIFI_CANCEL_IND: return "SIT_AIMS_HO_TO_WIFI_CANCEL_IND";
        case SIT_IND_AIMS_PAYLOAD_INFO_IND: return "SIT_IND_AIMS_PAYLOAD_INFO_IND";
        case SIT_AIMS_HO_TO_3GPP_REQ: return "SIT_AIMS_HO_TO_3GPP_REQ";
        case SIT_IND_AIMS_VOWIFI_HO_CALL_INFO: return "SIT_IND_AIMS_VOWIFI_HO_CALL_INFO";
        case SIT_IND_AIMS_NEW_CDMA_SMS: return "SIT_IND_AIMS_NEW_CDMA_SMS";
        case SIT_AIMS_SEND_ACK_INCOMING_CDMA_SMS: return "SIT_AIMS_SEND_ACK_INCOMING_CDMA_SMS";
        case SIT_IND_AIMS_RINGBACK_TONE: return "SIT_IND_AIMS_RINGBACK_TONE";
        case SIT_AIMS_MEDIA_STATE_IND: return "SIT_AIMS_MEDIA_STATE_IND";
        case SIT_IND_AIMS_CALL_MANAGE: return "SIT_IND_AIMS_CALL_MANAGE";
        case SIT_IND_AIMS_CONF_CALL_ADD_REMOVE_USER: return "SIT_IND_AIMS_CONF_CALL_ADD_REMOVE_USER";
        case SIT_IND_AIMS_ENHANCED_CONF_CALL: return "SIT_IND_AIMS_ENHANCED_CONF_CALL";
        case SIT_IND_AIMS_CALL_MODIFY_RSP: return "SIT_IND_AIMS_CALL_MODIFY_RSP";
        case SIT_IND_AIMS_DTMF_EVENT: return "SIT_IND_AIMS_DTMF_EVENT";
        case SIT_AIMS_DEL_PDN_INFO: return "SIT_AIMS_DEL_PDN_INFO";
        case SIT_AIMS_STACK_START_REQ: return "SIT_AIMS_STACK_START_REQ";
        case SIT_AIMS_STACK_STOP_REQ: return "SIT_AIMS_STACK_STOP_REQ";
        case SIT_AIMS_XCAPM_START_REQ: return "SIT_AIMS_XCAPM_START_REQ";
        case SIT_AIMS_XCAPM_STOP_REQ: return "SIT_AIMS_XCAPM_STOP_REQ";
        case SIT_AIMS_RTT_SEND_TEXT: return "SIT_AIMS_RTT_SEND_TEXT";
        case SIT_IND_AIMS_RTT_NEW_TEXT: return "SIT_IND_AIMS_RTT_NEW_TEXT";
        case SIT_IND_AIMS_RTT_FAIL_SENDING_TEXT: return "SIT_IND_AIMS_RTT_FAIL_SENDING_TEXT";
        case SIT_AIMS_EXIT_EMERGENCY_CB_MODE: return "SIT_AIMS_EXIT_EMERGENCY_CB_MODE";
        case SIT_IND_AIMS_EXIT_EMERGENCY_CB_MODE: return "SIT_IND_AIMS_EXIT_EMERGENCY_CB_MODE";
        case SIT_AIMS_SET_GEO_LOCATION_INFO: return "SIT_AIMS_SET_GEO_LOCATION_INFO";
        case SIT_AIMS_CDMA_SEND_SMS: return "SIT_AIMS_CDMA_SEND_SMS";
        case SIT_AIMS_SET_PDN_EST_STATUS: return "SIT_AIMS_SET_PDN_EST_STATUS";
        case SIT_AIMS_SET_RTP_RX_STATISTICS: return "SIT_AIMS_SET_RTP_RX_STATISTICS";
        case SIT_IND_AIMS_DIALOG_INFO: return "SIT_IND_AIMS_DIALOG_INFO";
        case SIT_AIMS_RCS_MULTI_FRAME: return "SIT_AIMS_RCS_MULTI_FRAME";
        case SIT_AIMS_RCS_CHAT: return "SIT_AIMS_RCS_CHAT";
        case SIT_AIMS_RCS_GROUP_CHAT: return "SIT_AIMS_RCS_GROUP_CHAT";
        case SIT_AIMS_RCS_OFFLINE_MODE: return "SIT_AIMS_RCS_OFFLINE_MODE";
        case SIT_AIMS_RCS_FILE_TRANSFER: return "SIT_AIMS_RCS_FILE_TRANSFER";
        case SIT_AIMS_RCS_COMMON_MESSAGE: return "SIT_AIMS_RCS_COMMON_MESSAGE";
        case SIT_AIMS_RCS_CONTENT_SHARE: return "SIT_AIMS_RCS_CONTENT_SHARE";
        case SIT_AIMS_RCS_PRESENCE: return "SIT_AIMS_RCS_PRESENCE";
        case SIT_AIMS_RCS_XCAP_MANAGE: return "SIT_AIMS_RCS_XCAP_MANAGE";
        case SIT_AIMS_RCS_CONFIG_MANAGE: return "SIT_AIMS_RCS_CONFIG_MANAGE";
        case SIT_AIMS_RCS_TLS_MANAGE: return "SIT_AIMS_RCS_TLS_MANAGE";
        case SIT_IND_AIMS_RCS_MULTI_FRAME: return "SIT_IND_AIMS_RCS_MULTI_FRAME";
        case SIT_IND_AIMS_RCS_CHAT: return "SIT_IND_AIMS_RCS_CHAT";
        case SIT_IND_AIMS_RCS_GROUP_CHAT: return "SIT_IND_AIMS_RCS_GROUP_CHAT";
        case SIT_IND_AIMS_RCS_OFFLINE_MODE: return "SIT_IND_AIMS_RCS_OFFLINE_MODE";
        case SIT_IND_AIMS_RCS_FILE_TRANSFER: return "SIT_IND_AIMS_RCS_FILE_TRANSFER";
        case SIT_IND_AIMS_RCS_COMMON_MESSAGE: return "SIT_IND_AIMS_RCS_COMMON_MESSAGE";
        case SIT_IND_AIMS_RCS_CONTENT_SHARE: return "SIT_IND_AIMS_RCS_CONTENT_SHARE";
        case SIT_IND_AIMS_RCS_PRESENCE: return "SIT_IND_AIMS_RCS_PRESENCE";
        case SIT_IND_AIMS_RCS_XCAP_MANAGE: return "SIT_IND_AIMS_RCS_XCAP_MANAGE";
        case SIT_IND_AIMS_RCS_CONFIG_MANAGE: return "SIT_IND_AIMS_RCS_CONFIG_MANAGE";
        case SIT_IND_AIMS_RCS_TLS_MANAGE: return "SIT_IND_AIMS_RCS_TLS_MANAGE";
        case SIT_IND_AIMS_MEDIA_STATUS: return "SIT_IND_AIMS_MEDIA_STATUS";
        case SIT_IND_AIMS_SIP_MSG_INFO: return "SIT_IND_AIMS_SIP_MSG_INFO";
        case SIT_IND_AIMS_VOICE_RTP_QUALITY: return "SIT_IND_AIMS_VOICE_RTP_QUALITY";
        case SIT_AIMS_SET_HIDDEN_MENU_ITEM: return "SIT_AIMS_SET_HIDDEN_MENU_ITEM";
        case SIT_AIMS_GET_HIDDEN_MENU_ITEM: return "SIT_AIMS_GET_HIDDEN_MENU_ITEM";
        case SIT_AIMS_IND_RTP_RX_STATISTICS: return "SIT_AIMS_IND_RTP_RX_STATISTICS";
        //AIMS support end ---------------------

        //SIT_BASE_ID_VSIM = 0x0E00,
        case SIT_VSIM_NOTIFICATION: return "SIT_VSIM_NOTIFICATION";
        case SIT_IND_VSIM_OPERATION: return "SIT_IND_VSIM_OPERATION";
        case SIT_VSIM_OPERATION: return "SIT_VSIM_OPERATION";

        //WFC
        case SIT_SET_WFC_MEDIA_CONFIGURATION: return "SIT_SET_WFC_MEDIA_CONFIGURATION";
        case SIT_IND_WFC_RTP_RTCP_TIMEOUT: return "SIT_IND_WFC_RTP_RTCP_TIMEOUT";
        case SIT_WFC_DTMF_START: return "SIT_WFC_DTMF_START";
        case SIT_IND_WFC_FIRST_RTP: return "SIT_IND_WFC_FIRST_RTP";
        case SIT_IND_WFC_RTCP_RX_SR: return "SIT_IND_WFC_RTCP_RX_SR";
        case SIT_IND_WFC_RCV_DTMF_NOTI: return "SIT_IND_WFC_RCV_DTMF_NOTI";
        case SIT_SET_VOWIFI_HO_THRESHOLD: return "SIT_SET_VOWIFI_HO_THRESHOLD";

        case SIT_GET_RADIO_NODE: return "SIT_GET_RADIO_NODE";
        case SIT_SET_RADIO_NODE: return "SIT_SET_RADIO_NODE";
        case SIT_GET_VOLTE_PROVISION_UPDATE: return "SIT_GET_VOLTE_PROVISION_UPDATE";
        case SIT_SET_VOLTE_PROVISION_UPDATE: return "SIT_SET_VOLTE_PROVISION_UPDATE";

        //P-Sensor
        case SIT_IND_SAR_CONTROL_STATE: return "SIT_IND_SAR_CONTROL_STATE";
        case SIT_SET_SENSOR_STATUS: return "SIT_SET_SENSOR_STATUS";

        //SAR
        case SIT_OEM_GET_SAR_STATE: return "SIT_OEM_GET_SAR_STATE";
        case SIT_OEM_SET_SAR_STATE: return "SIT_OEM_SET_SAR_STATE";
        case SIT_OEM_IND_RF_CONNECTION: return "SIT_OEM_IND_RF_CONNECTION";

        //Radio Config
        case SIT_GET_SLOT_STATUS: return "SIT_GET_SLOT_STATUS";
        case SIT_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING: return "SIT_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING";
        case SIT_IND_SIM_SLOT_STATUS_CHANGED: return "SIT_IND_SIM_SLOT_STATUS_CHANGED";
        case SIT_SET_PREFERRED_DATA_MODEM: return "SIT_SET_PREFERRED_DATA_MODEM";
        //case SIT_GET_PHONE_CAPABILITY: return "SIT_GET_PHONE_CAPABILITY";
        //case SIT_SET_MODEMS_CONFIG: return "SIT_SET_MODEMS_CONFIG";
        //case SIT_GET_MODEMS_CONFIG: return "SIT_GET_MODEMS_CONFIG";

        //SELFLOG
        case SIT_SET_SELFLOG: return "SIT_SET_SELFLOG";
        case SIT_SET_SELFLOG_PROFILE: return "SIT_SET_SELFLOG_PROFILE";
        case SIT_GET_SELFLOG_STATUS: return "SIT_GET_SELFLOG_STATUS";
        case SIT_IND_SELFLOG_STATUS: return "SIT_IND_SELFLOG_STATUS";

        // embms
        case SIT_SET_EMBMS_SERVICE: return "SIT_SET_EMBMS_SERVICE";
        case SIT_SET_EMBMS_SESSION: return "SIT_SET_EMBMS_SESSION";
        case SIT_IND_EMBMS_COVERAGE: return "SIT_IND_EMBMS_COVERAGE";
        case SIT_GET_EMBMS_SESSION_LIST: return "SIT_GET_EMBMS_SESSION_LIST";
        case SIT_IND_EMBMS_SESSION_LIST: return "SIT_IND_EMBMS_SESSION_LIST";
        case SIT_GET_EMBMS_SIGNAL_STRENGTH: return "SIT_GET_EMBMS_SIGNAL_STRENGTH";
        case SIT_IND_EMBMS_SIGNAL_STRENGTH: return "SIT_IND_EMBMS_SIGNAL_STRENGTH";
        case SIT_GET_EMBMS_NETWORK_TIME: return "SIT_GET_EMBMS_NETWORK_TIME";
        case SIT_IND_EMBMS_NETWORK_TIME: return "SIT_IND_EMBMS_NETWORK_TIME";
        case SIT_IND_EMBMS_SAI_LIST: return "SIT_IND_EMBMS_SAI_LIST";
        case SIT_IND_EMBMS_GLOBAL_CELL_ID: return "SIT_IND_EMBMS_GLOBAL_CELL_ID";

#ifdef SUPPORT_CDMA
        // Call & SS
        case SIT_SET_CDMA_VOICE_PRIVACY_MODE: return "SIT_SET_CDMA_VOICE_PRIVACY_MODE"; // 0x0011
        case SIT_GET_CDMA_VOICE_PRIVACY_MODE: return "SIT_GET_CDMA_VOICE_PRIVACY_MODE"; // 0x0012
        case SIT_CDMA_BURST_DTMF: return "SIT_CDMA_BURST_DTMF"; // 0x0015
        case SIT_SET_CDMA_FLASH_INFO: return "SIT_SET_CDMA_FLASH_INFO";
        case SIT_IND_CDMA_INFO_REC: return "SIT_IND_CDMA_INFO_REC";
        case SIT_IND_CDMA_CALL_WAITING: return "SIT_IND_CDMA_CALL_WAITING";
        case SIT_IND_OTA_PROVISION_STATUS: return "SIT_IND_OTA_PROVISION_STATUS";

        // Network
        case SIT_SET_CDMA_HYBRID_MODE: return "SIT_SET_CDMA_HYBRID_MODE";
        case SIT_GET_CDMA_HYBRID_MODE: return "SIT_GET_CDMA_HYBRID_MODE";
        case SIT_SET_CDMA_ROAMING_PREFERENCE: return "SIT_SET_CDMA_ROAMING_PREFERENCE";
        case SIT_GET_CDMA_ROAMING_PREFERENCE: return "SIT_GET_CDMA_ROAMING_PREFERENCE";

        // SMS
        case SIT_CDMA_SEND_SMS: return "SIT_CDMA_SEND_SMS";
        case SIT_CDMA_SEND_SMS_ACK: return "SIT_CDMA_SEND_SMS_ACK";
        case SIT_CDMA_GET_BCST_SMS_CFG: return "SIT_CDMA_GET_BCST_SMS_CFG";
        case SIT_CDMA_SET_BCST_SMS_CFG: return "SIT_CDMA_SET_BCST_SMS_CFG";
        case SIT_CDMA_ACT_BCST_SMS: return "SIT_CDMA_ACT_BCST_SMS";
        case SIT_CDMA_WRITE_SMS_TO_RUIM: return "SIT_CDMA_WRITE_SMS_TO_RUIM";
        case SIT_CDMA_DELETE_SMS_ON_RUIM: return "SIT_CDMA_DELETE_SMS_ON_RUIM";
        case SIT_IND_CDMA_NEW_SMS: return "SIT_IND_CDMA_NEW_SMS";
        case SIT_IND_CDMA_RUIM_SMS_STORAGE_FULL: return "SIT_IND_CDMA_RUIM_SMS_STORAGE_FULL";
        case SIT_IND_CDMA_VOICE_MSG_WAITING_INFO: return "SIT_IND_CDMA_VOICE_MSG_WAITING_INFO";

        // Misc
        case SIT_GET_CDMA_SUBSCRIPTION: return "SIT_GET_CDMA_SUBSCRIPTION";
#endif // SUPPORT_CDMA

        case SIT_IND_ENTER_EMERGENCY_CB_MODE: return "SIT_IND_ENTER_EMERGENCY_CB_MODE";
        case SIT_IND_EXIT_EMERGENCY_CB_MODE: return "SIT_IND_EXIT_EMERGENCY_CB_MODE";
        case SIT_EXIT_EMERGENCY_CB_MODE: return "SIT_EXIT_EMERGENCY_CB_MODE";
        case SIT_SET_IND_CMD_FILTER: return "SIT_SET_IND_CMD_FILTER";
        case SIT_IND_RESEND_IN_CALL_MUTE: return "SIT_IND_RESEND_IN_CALL_MUTE";
        case SIT_IND_CDMA_PRL_CHANGED: return "SIT_IND_CDMA_PRL_CHANGED";
        case SIT_SET_SET_UICC_SUBSCRIPTION: return "SIT_SET_SET_UICC_SUBSCRIPTION";
        case SIT_SET_SIM_CARD_POWER: return "SIT_SET_SIM_CARD_POWER";
        case SIT_IND_UICC_SUBSCRIPTION_STATE_CHANGED: return "SIT_IND_UICC_SUBSCRIPTION_STATE_CHANGED";
        case SIT_IND_HW_CONFIG_CHANGED: return "SIT_IND_HW_CONFIG_CHANGED";
        case SIT_IND_RADIO_CAPABILITY: return "SIT_IND_RADIO_CAPABILITY";
        case SIT_IND_SCG_BEARER_ALLOCATION: return "SIT_IND_SCG_BEARER_ALLOCATION";
        case SIT_IND_PHYSICAL_CHANNEL_CONFIG: return "SIT_IND_PHYSICAL_CHANNEL_CONFIG";
        case SIT_IND_ON_SS: return "SIT_IND_ON_SS";
        case SIT_IND_STK_CC_ALPHA_NOTIFY: return "SIT_IND_STK_CC_ALPHA_NOTIFY";
        case SIT_START_LCE_INFO: return "SIT_START_LCE_INFO";
        case SIT_STOP_LCE_INFO: return "SIT_STOP_LCE_INFO";
        case SIT_GET_LCE_DATA: return "SIT_GET_LCE_DATA";
        case SIT_IND_LCE_DATA: return "SIT_IND_LCE_DATA";
        case SIT_IND_PCO_DATA: return "SIT_IND_PCO_DATA";
        case SIT_IND_MODEM_RESTART: return "SIT_IND_MODEM_RESTART";
        case SIT_SET_STACK_STATUS: return "SIT_SET_STACK_STATUS";
        case SIT_GET_STACK_STATUS: return "SIT_GET_STACK_STATUS";
        case SIT_SET_CARRIER_INFO_IMSI_ENCRYPTION: return "SIT_SET_CARRIER_INFO_IMSI_ENCRYPTION";
        case SIT_IND_CARRIER_INFO_IMSI_ENCRYPTION: return "SIT_IND_CARRIER_INFO_IMSI_ENCRYPTION";
        case SIT_START_SCANNING_NETWORKS: return "SIT_START_SCANNING_NETWORKS";
        case SIT_STOP_SCANNING_NETWORKS: return "SIT_STOP_SCANNING_NETWORKS";
        case SIT_IND_SCANNING_NETWORKS: return "SIT_IND_SCANNING_NETWORKS";
        case SIT_SET_CARRIER_RESTRICTIONS: return "SIT_SET_CARRIER_RESTRICTIONS";
        case SIT_GET_CARRIER_RESTRICTIONS: return "SIT_GET_CARRIER_RESTRICTIONS";
        case SIT_IND_KEEPALIVE_STATUS: return "SIT_IND_KEEPALIVE_STATUS";
        case SIT_IND_GPS_LOCK_MODE: return "SIT_IND_GPS_LOCK_MODE";
        case SIT_SET_RSSI_SCAN: return "SIT_SET_RSSI_SCAN";
        case SIT_IND_RSSI_SCAN: return "SIT_IND_RSSI_SCAN";
        case SIT_SET_FORWARDING_AT_COMMAND: return "SIT_SET_FORWARDING_AT_COMMAND";
        case SIT_IND_FORWARDING_AT_COMMAND: return "SIT_IND_FORWARDING_AT_COMMAND";
        case SIT_OEM_GET_SIM_LOCK_INFO: return "SIT_OEM_GET_SIM_LOCK_INFO";
        case SIT_OEM_NW_INFO: return "SIT_OEM_NW_INFO";
        case SIT_OEM_IND_NW_INFO: return "SIT_OEM_IND_NW_INFO";
        case SIT_OEM_SET_RTP_PKTLOSS_THRESHOLD: return "SIT_OEM_SET_RTP_PKTLOSS_THRESHOLD";
        case SIT_OEM_IND_RTP_PKTLOSS_THRESHOLD: return "SIT_OEM_IND_RTP_PKTLOSS_THRESHOLD";
        case SIT_GET_MANUAL_RAT_MODE: return "SIT_GET_MANUAL_RAT_MODE";
        case SIT_SET_MANUAL_RAT_MODE: return "SIT_SET_MANUAL_RAT_MODE";
        case SIT_GET_FREQUENCY_LOCK: return "SIT_GET_FREQUENCY_LOCK";
        case SIT_SET_FREQUENCY_LOCK: return "SIT_SET_FREQUENCY_LOCK";
        case SIT_OEM_SET_FUNC_SWITCH_REQ: return "SIT_OEM_SET_FUNC_SWITCH_REQ";
        case SIT_OEM_SET_PDCP_DISCARD_TIMER: return "SIT_OEM_SET_PDCP_DISCARD_TIMER";
        case SIT_SET_ENDC_MODE: return "SIT_SET_ENDC_MODE";
        case SIT_GET_ENDC_MODE: return "SIT_GET_ENDC_MODE";
        case SIT_SET_INTPS_SERVICE: return "SIT_SET_INTPS_SERVICE";
        case SIT_OEM_SET_ACTIVATE_VSIM: return "SIT_OEM_SET_ACTIVATE_VSIM";
        case SIT_IND_FREQUENCY_INFO: return "SIT_IND_FREQUENCY_INFO";
        case SIT_OEM_GET_CQI_INFO: return "SIT_OEM_GET_CQI_INFO";
        case SIT_OEM_SET_SAR_SETTING: return "SIT_OEM_SET_SAR_SETTING";
        case SIT_SET_IMS_TEST_MODE: return "SIT_SET_IMS_TEST_MODE";
        case SIT_OEM_SET_GMO_SWITCH: return "SIT_OEM_SET_GMO_SWITCH";
        case SIT_OEM_SET_TCS_FCI_REQ: return "SIT_OEM_SET_TCS_FCI_REQ";
        case SIT_OEM_GET_TCS_FCI_INFO: return "SIT_OEM_GET_TCS_FCI_INFO";
        case SIT_GET_PHONE_CAPABILITY: return "SIT_GET_PHONE_CAPABILITY";
        case SIT_OEM_SET_CA_BW_FILTER: return "SIT_OEM_SET_CA_BW_FILTER";
        case SIT_OEM_IND_CA_BW_FILTER: return "SIT_OEM_IND_CA_BW_FILTER";
        case SIT_IND_B2_B1_CONFIG: return "SIT_IND_B2_B1_CONFIG";
        case SIT_SET_MODEM_LOG_DUMP: return "SIT_SET_MODEM_LOG_DUMP";
        case SIT_SET_ELEVATOR_SENSOR: return "SIT_SET_ELEVATOR_SENSOR";
        case SIT_SET_LOCATION_UPDATE_SETTING: return "SIT_SET_LOCATION_UPDATE_SETTING";
        case SIT_START_KEEPALIVE: return "SIT_START_KEEPALIVE";
        case SIT_STOP_KEEPALIVE: return "SIT_STOP_KEEPALIVE";
        case SIT_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA: return "SIT_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA";
        case SIT_SET_LINK_CAPACITY_REPORTING_CRITERIA: return "SIT_SET_LINK_CAPACITY_REPORTING_CRITERIA";
        case SIT_IND_CURRENT_LINK_CAPACITY_ESTIMATE: return "SIT_IND_CURRENT_LINK_CAPACITY_ESTIMATE";
        case SIT_OEM_IND_ENDC_CAPABILITY: return "SIT_OEM_IND_ENDC_CAPABILITY";
        case SIT_OEM_SET_FORBID_LTE_CELL: return "SIT_OEM_SET_FORBID_LTE_CELL";
        case SIT_GET_FREQUENCY_INFO: return "SIT_GET_FREQUENCY_INFO";

        default: return "<unknown sit>";
    }
};

const char * rcmErrorToString(int rspErr) {

    switch(rspErr) {
        case RCM_E_SUCCESS: return "RCM_E_SUCCESS";
        case RCM_E_RADIO_NOT_AVAILABLE: return "RCM_E_RADIO_NOT_AVAILABLE";
        case RCM_E_GENERIC_FAILURE: return "RCM_E_GENERIC_FAILURE";
        case RCM_E_PASSWORD_INCORRECT: return "RCM_E_PASSWORD_INCORRECT";
        case RCM_E_SIM_PIN2: return "RCM_E_SIM_PIN2";
        case RCM_E_SIM_PUK2: return "RCM_E_SIM_PUK2";
        case RCM_E_REQUEST_NOT_SUPPORTED: return "RCM_E_REQUEST_NOT_SUPPORTED";
        case RCM_E_CANCELLED: return "RCM_E_CANCELLED";
        case RCM_E_OP_NOT_ALLOWED_DURING_VOICE_CALL: return "RCM_E_OP_NOT_ALLOWED_DURING_VOICE_CALL";
        case RCM_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW: return "RCM_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW";
        case RCM_E_SMS_SEND_FAIL_RETRY: return "RCM_E_SMS_SEND_FAIL_RETRY";
        case RCM_E_SIM_ABSENT: return "RCM_E_SIM_ABSENT";
        case RCM_E_SUBSCRIPTION_NOT_AVAILABLE: return "RCM_E_SUBSCRIPTION_NOT_AVAILABLE";
        case RCM_E_MODE_NOT_SUPPORTED: return "RCM_E_MODE_NOT_SUPPORTED";
        case RCM_E_FDN_CHECK_FAILURE: return "RCM_E_FDN_CHECK_FAILURE";
        case RCM_E_ILLEGAL_SIM_OR_ME: return "RCM_E_ILLEGAL_SIM_OR_ME";
        case RCM_E_MISSING_RESOURCE: return "RCM_E_MISSING_RESOURCE";
        case RCM_E_NO_SUCH_ELEMENT: return "RCM_E_NO_SUCH_ELEMENT";
        case RCM_E_SIM_MEMORY_FULL: return "RCM_E_SIM_MEMORY_FULL";
        case RCM_E_PB_TOO_LONG_DATA: return "RCM_E_PB_TOO_LONG_DATA";
        case RCM_E_SIM_PIN_REQ: return "RCM_E_SIM_PIN_REQ";
        case RCM_E_SIM_PUK_REQ: return "RCM_E_SIM_PUK_REQ";
        case RCM_E_UNDEFINED_CMD: return "RCM_E_UNDEFINED_CMD";
        case RCM_E_OP_NOT_ALLOWED_DURING_PLMN_SEARCH: return "RCM_E_OP_NOT_ALLOWED_DURING_PLMN_SEARCH";
        default: return "<unknown rcm error>";
    }
}

//////////////////////////////////////////////////////////////////////////////
// ProtocolBaseAdapter implement
//////////////////////////////////////////////////////////////////////////////
UINT ProtocolBaseAdapter::GetType() const {
    if (m_pModemData != NULL) {
        const RCM_HEADER *rcmdata = (RCM_HEADER *)m_pModemData->GetRawData();
        if (rcmdata != NULL/* && m_pModemData->GetLength() >= sizeof(RCM_HEADER)*/) {
            return (UINT)(rcmdata->type & 0x000000FF);
        }
    }
    return 0;
}

UINT ProtocolBaseAdapter::GetId() const {
    if (m_pModemData != NULL) {
        const RCM_HEADER *rcmdata = (RCM_HEADER *)m_pModemData->GetRawData();
        if (rcmdata != NULL/* && m_pModemData->GetLength() >= sizeof(RCM_HEADER)*/) {
            return (UINT)(rcmdata->id & 0x0000FFFF);
        }
    }
    return 0;
}

UINT ProtocolBaseAdapter::GetLength() const {
    if (m_pModemData != NULL) {
        const RCM_HEADER *rcmdata = (RCM_HEADER *)m_pModemData->GetRawData();
        if (rcmdata != NULL/* && m_pModemData->GetLength() >= sizeof(RCM_HEADER)*/) {
            return (UINT)(rcmdata->length & 0x0000FFFF);
        }
    }
    return 0;
}

UINT ProtocolBaseAdapter::GetToken() const
{
    if (m_pModemData != NULL) {
        const RCM_HEADER *rcmdata = (RCM_HEADER *)m_pModemData->GetRawData();
        if (rcmdata != NULL/* && m_pModemData->GetLength() >= sizeof(RCM_HEADER)*/) {
            if (rcmdata->type == RCM_TYPE_REQUEST || rcmdata->type == RCM_TYPE_RESPONSE)
                return rcmdata->ext.req.token;
        }
    }
    return TOKEN_INVALID;
}

const char *ProtocolBaseAdapter::GetParameter() const
{
    const char *rawdata = (m_pModemData != NULL ? m_pModemData->GetRawData() : NULL);
    if (rawdata != NULL && m_pModemData->GetLength() > (int)sizeof(RCM_HEADER)) {
        return rawdata + sizeof(RCM_HEADER);
    }
    return NULL;
}

UINT ProtocolBaseAdapter::GetParameterLength() const
{
    if (m_pModemData->GetLength() > (int)sizeof(RCM_HEADER)) {
        return (UINT)(m_pModemData->GetLength() - (int)sizeof(RCM_HEADER));
    }
    return 0;
}

bool ProtocolBaseAdapter::IsRequest() const
{
    return GetType() == RCM_TYPE_REQUEST;
}
bool ProtocolBaseAdapter::IsResponse() const
{
    UINT type = GetType();
    return (type == RCM_TYPE_RESPONSE || type == RCM_TYPE_INDICATION);
}
bool ProtocolBaseAdapter::IsUnsolicitedResponse() const
{
    return GetType() == RCM_TYPE_INDICATION;
}
bool ProtocolBaseAdapter::IsSolicitedResponse() const
{
    return GetType() == RCM_TYPE_RESPONSE;
}

int ProtocolBaseAdapter::switchRafValueForFW(int raf) const
{
    int result = 0;

    if((raf & RAF_CP_UNKNOWN) != 0)
        result |= RAF_UNKNOWN;
    if((raf & RAF_CP_GPRS) != 0)
        result |= RAF_GPRS;
    if((raf & RAF_CP_EDGE) != 0)
        result |= RAF_EDGE;
    if((raf & RAF_CP_UMTS) != 0)
        result |= RAF_UMTS;
    if((raf & RAF_CP_HSDPA) != 0)
        result |= RAF_HSDPA;
    if((raf & RAF_CP_HSUPA) != 0)
        result |= RAF_HSUPA;
    if((raf & RAF_CP_HSPA) != 0)
        result |= RAF_HSPA;
    if((raf & RAF_CP_LTE) != 0)
        result |= RAF_LTE;
    if((raf & RAF_CP_HSPAP) != 0)
        result |= RAF_HSPAP;
    if((raf & RAF_CP_GSM) != 0)
        result |= RAF_GSM;
    if((raf & RAF_CP_TD_SCDMA) != 0)
        result |= RAF_TD_SCDMA;
    if((raf & RAF_CP_IS95A) != 0)
        result |= RAF_IS95A;
    if((raf & RAF_CP_IS95B) != 0)
        result |= RAF_IS95B;
    if((raf & RAF_CP_1xRTT) != 0)
        result |= RAF_1xRTT;
    if((raf & RAF_CP_EVDO_0) != 0)
        result |= RAF_EVDO_0;
    if((raf & RAF_CP_EVDO_A) != 0)
        result |= RAF_EVDO_A;
    if((raf & RAF_CP_EVDO_B) != 0)
        result |= RAF_EVDO_B;
    if((raf & RAF_CP_EHRPD) != 0)
        result |= RAF_EHRPD;
    if((raf & RAF_CP_5G) != 0)
        result |= RAF_NR;
    return result;
}

//////////////////////////////////////////////////////////////////////////////
// RCMReqAdapter implement
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
// RCMRespAdapter
//////////////////////////////////////////////////////////////////////////////
UINT ProtocolRespAdapter::GetErrorCode() const
{
    if (m_pModemData != NULL) {
        const RCM_HEADER *rcmdata = (RCM_HEADER *)m_pModemData->GetRawData();
        if (rcmdata != NULL && m_pModemData->GetLength() >= (int)sizeof(RCM_HEADER)) {
            if (rcmdata->type == RCM_TYPE_RESPONSE)
                return ConvertProtocolErrorCodeToRilErrorCode((UINT)(rcmdata->ext.rsp.error & 0xFF));
        }
    }
    // default error code
    return RIL_E_GENERIC_FAILURE;
}

//////////////////////////////////////////////////////////////////////////////
// RCMIndAdapter implement
//////////////////////////////////////////////////////////////////////////////
const char *ProtocolIndAdapter::GetParameter() const
{
    const char *rawdata = (m_pModemData != NULL ? m_pModemData->GetRawData() : NULL);
    if (rawdata != NULL && m_pModemData->GetLength() > (int)sizeof(RCM_IND_HEADER)) {
        return rawdata + sizeof(RCM_IND_HEADER);
    }
    return NULL;
}

UINT ProtocolIndAdapter::GetParameterLength() const
{
    if (m_pModemData->GetLength() > (int)sizeof(RCM_IND_HEADER)) {
        return (UINT)(m_pModemData->GetLength() - (int)sizeof(RCM_IND_HEADER));
    }
    return 0;
}
